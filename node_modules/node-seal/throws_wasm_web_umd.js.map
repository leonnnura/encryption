{"version":3,"file":"throws_wasm_web_umd.js","sources":["../src/bin/seal_throws_wasm_web.js","../src/main/loader.ts","../src/implementation/constants.ts","../src/implementation/batch-encoder.ts","../src/implementation/cipher-text.ts","../src/implementation/ckks-encoder.ts","../src/implementation/coeff-modulus.ts","../src/implementation/compr-mode-type.ts","../src/implementation/context.ts","../src/implementation/context-data.ts","../src/implementation/decryptor.ts","../src/implementation/encryption-parameters.ts","../src/implementation/encryptor.ts","../src/implementation/evaluator.ts","../src/implementation/exception.ts","../src/implementation/galois-keys.ts","../src/implementation/key-generator.ts","../src/implementation/memory-pool-handle.ts","../src/implementation/modulus.ts","../src/implementation/parms-id-type.ts","../src/implementation/plain-modulus.ts","../src/implementation/plain-text.ts","../src/implementation/public-key.ts","../src/implementation/relin-keys.ts","../src/implementation/scheme-type.ts","../src/implementation/seal.ts","../src/implementation/secret-key.ts","../src/implementation/security-level.ts","../src/implementation/vector.ts","../src/throws_wasm_web_umd.ts","../src/main/seal.ts","../src/implementation/encryption-parameter-qualifiers.ts","../src/implementation/serializable.ts"],"sourcesContent":["\nvar Module = (() => {\n  var _scriptName = typeof document != 'undefined' ? document.currentScript?.src : undefined;\n  \n  return (\nfunction(moduleArg = {}) {\n  var moduleRtn;\n\nvar k=Object.assign({},moduleArg),aa,ba,ca=new Promise((a,b)=>{aa=a;ba=b}),da=\"object\"==typeof window,ea=\"function\"==typeof importScripts,fa=Object.assign({},k),ha=\"./this.program\",ia=(a,b)=>{throw b;},r=\"\",ja;\nif(da||ea)ea?r=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(r=document.currentScript.src),_scriptName&&(r=_scriptName),r.startsWith(\"blob:\")?r=\"\":r=r.substr(0,r.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1),ea&&(ja=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)});var ka=k.printErr||console.error.bind(console);Object.assign(k,fa);fa=null;k.thisProgram&&(ha=k.thisProgram);k.quit&&(ia=k.quit);var la;\nk.wasmBinary&&(la=k.wasmBinary);var ma,na=!1,w,x,y,z,A,C,oa,pa;function qa(){var a=ma.buffer;k.HEAP8=w=new Int8Array(a);k.HEAP16=y=new Int16Array(a);k.HEAPU8=x=new Uint8Array(a);k.HEAPU16=z=new Uint16Array(a);k.HEAP32=A=new Int32Array(a);k.HEAPU32=C=new Uint32Array(a);k.HEAPF32=oa=new Float32Array(a);k.HEAPF64=pa=new Float64Array(a)}var ra=[],sa=[],ta=[],ua=[];function va(){var a=k.preRun.shift();ra.unshift(a)}var D=0,wa=null,F=null;\nfunction xa(a){k.onAbort?.(a);a=\"Aborted(\"+a+\")\";ka(a);na=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");ba(a);throw a;}var ya=a=>a.startsWith(\"data:application/octet-stream;base64,\"),za;\nfunction Aa(){var a=za;return Promise.resolve().then(()=>{if(a==za&&la)var b=new Uint8Array(la);else{if(ya(a)){b=atob(a.slice(37));for(var c=new Uint8Array(b.length),d=0;d<b.length;++d)c[d]=b.charCodeAt(d);b=c}else b=void 0;if(!b)if(ja)b=ja(a);else throw\"both async and sync fetching of the wasm failed\";}return b})}function Ba(a,b){return Aa().then(c=>WebAssembly.instantiate(c,a)).then(b,c=>{ka(`failed to asynchronously prepare wasm: ${c}`);xa(c)})}function Ca(a,b){return Ba(a,b)}\nfunction Da(a){this.name=\"ExitStatus\";this.message=`Program terminated with exit(${a})`;this.status=a}var Ea=a=>{for(;0<a.length;)a.shift()(k)},Fa=k.noExitRuntime||!0;class Ga{constructor(a){this.ca=a-24}}\nvar Ha=0,Ia=0,Ja,G=a=>{for(var b=\"\";x[a>>>0];)b+=Ja[x[a++>>>0]];return b},I={},J={},Ka={},K,La=a=>{throw new K(a);},M,O=(a,b,c)=>{function d(h){h=c(h);if(h.length!==a.length)throw new M(\"Mismatched type converter count\");for(var n=0;n<a.length;++n)N(a[n],h[n])}a.forEach(function(h){Ka[h]=b});var e=Array(b.length),g=[],l=0;b.forEach((h,n)=>{J.hasOwnProperty(h)?e[n]=J[h]:(g.push(h),I.hasOwnProperty(h)||(I[h]=[]),I[h].push(()=>{e[n]=J[h];++l;l===g.length&&d(e)}))});0===g.length&&d(e)};\nfunction Ma(a,b,c={}){var d=b.name;if(!a)throw new K(`type \"${d}\" must have a positive integer typeid pointer`);if(J.hasOwnProperty(a)){if(c.Ga)return;throw new K(`Cannot register type '${d}' twice`);}J[a]=b;delete Ka[a];I.hasOwnProperty(a)&&(b=I[a],delete I[a],b.forEach(e=>e()))}function N(a,b,c={}){if(!(\"argPackAdvance\"in b))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");return Ma(a,b,c)}\nvar Na=a=>{throw new K(a.R.da.ba.name+\" instance already deleted\");},Oa=!1,Qa=()=>{},Ra=(a,b,c)=>{if(b===c)return a;if(void 0===c.ga)return null;a=Ra(a,b,c.ga);return null===a?null:c.Da(a)},Sa={},P=[],Ta=()=>{for(;P.length;){var a=P.pop();a.R.qa=!1;a[\"delete\"]()}},Q,R={},Ua=(a,b)=>{if(void 0===b)throw new K(\"ptr should not be undefined\");for(;a.ga;)b=a.sa(b),a=a.ga;return R[b]},Wa=(a,b)=>{if(!b.da||!b.ca)throw new M(\"makeClassHandle requires ptr and ptrType\");if(!!b.ha!==!!b.fa)throw new M(\"Both smartPtrType and smartPtr must be specified\");\nb.count={value:1};return Va(Object.create(a,{R:{value:b,writable:!0}}))},Va=a=>{if(\"undefined\"===typeof FinalizationRegistry)return Va=b=>b,a;Oa=new FinalizationRegistry(b=>{b=b.R;--b.count.value;0===b.count.value&&(b.fa?b.ha.la(b.fa):b.da.ba.la(b.ca))});Va=b=>{var c=b.R;c.fa&&Oa.register(b,{R:c},b);return b};Qa=b=>{Oa.unregister(b)};return Va(a)};function Xa(){}\nvar S=(a,b)=>Object.defineProperty(b,\"name\",{value:a}),Ya=(a,b,c)=>{if(void 0===a[b].ea){var d=a[b];a[b]=function(...e){if(!a[b].ea.hasOwnProperty(e.length))throw new K(`Function '${c}' called with an invalid number of arguments (${e.length}) - expects one of (${a[b].ea})!`);return a[b].ea[e.length].apply(this,e)};a[b].ea=[];a[b].ea[d.pa]=d}},Za=(a,b,c)=>{if(k.hasOwnProperty(a)){if(void 0===c||void 0!==k[a].ea&&void 0!==k[a].ea[c])throw new K(`Cannot register public name '${a}' twice`);Ya(k,a,a);\nif(k.hasOwnProperty(c))throw new K(`Cannot register multiple overloads of a function with the same number of arguments (${c})!`);k[a].ea[c]=b}else k[a]=b,void 0!==c&&(k[a].Ra=c)},$a=a=>{if(void 0===a)return\"_unknown\";a=a.replace(/[^a-zA-Z0-9_]/g,\"$\");var b=a.charCodeAt(0);return 48<=b&&57>=b?`_${a}`:a};function ab(a,b,c,d,e,g,l,h){this.name=a;this.constructor=b;this.ka=c;this.la=d;this.ga=e;this.Ea=g;this.sa=l;this.Da=h;this.Ja=[]}\nvar bb=(a,b,c)=>{for(;b!==c;){if(!b.sa)throw new K(`Expected null or instance of ${c.name}, got an instance of ${b.name}`);a=b.sa(a);b=b.ga}return a};function cb(a,b){if(null===b){if(this.ya)throw new K(`null is not a valid ${this.name}`);return 0}if(!b.R)throw new K(`Cannot pass \"${db(b)}\" as a ${this.name}`);if(!b.R.ca)throw new K(`Cannot pass deleted object as a pointer of type ${this.name}`);return bb(b.R.ca,b.R.da.ba,this.ba)}\nfunction eb(a,b){if(null===b){if(this.ya)throw new K(`null is not a valid ${this.name}`);if(this.va){var c=this.Ka();null!==a&&a.push(this.la,c);return c}return 0}if(!b||!b.R)throw new K(`Cannot pass \"${db(b)}\" as a ${this.name}`);if(!b.R.ca)throw new K(`Cannot pass deleted object as a pointer of type ${this.name}`);if(!this.ua&&b.R.da.ua)throw new K(`Cannot convert argument of type ${b.R.ha?b.R.ha.name:b.R.da.name} to parameter type ${this.name}`);c=bb(b.R.ca,b.R.da.ba,this.ba);if(this.va){if(void 0===\nb.R.fa)throw new K(\"Passing raw pointer to smart pointer is illegal\");switch(this.Ma){case 0:if(b.R.ha===this)c=b.R.fa;else throw new K(`Cannot convert argument of type ${b.R.ha?b.R.ha.name:b.R.da.name} to parameter type ${this.name}`);break;case 1:c=b.R.fa;break;case 2:if(b.R.ha===this)c=b.R.fa;else{var d=b.clone();c=this.La(c,T(()=>d[\"delete\"]()));null!==a&&a.push(this.la,c)}break;default:throw new K(\"Unsupporting sharing policy\");}}return c}\nfunction fb(a,b){if(null===b){if(this.ya)throw new K(`null is not a valid ${this.name}`);return 0}if(!b.R)throw new K(`Cannot pass \"${db(b)}\" as a ${this.name}`);if(!b.R.ca)throw new K(`Cannot pass deleted object as a pointer of type ${this.name}`);if(b.R.da.ua)throw new K(`Cannot convert argument of type ${b.R.da.name} to parameter type ${this.name}`);return bb(b.R.ca,b.R.da.ba,this.ba)}function gb(a){return this.fromWireType(C[a>>>2>>>0])}\nfunction hb(a,b,c,d,e,g,l,h,n,m,p){this.name=a;this.ba=b;this.ya=c;this.ua=d;this.va=e;this.Ia=g;this.Ma=l;this.Ba=h;this.Ka=n;this.La=m;this.la=p;e||void 0!==b.ga?this.toWireType=eb:(this.toWireType=d?cb:fb,this.ia=null)}\nvar ib=(a,b,c)=>{if(!k.hasOwnProperty(a))throw new M(\"Replacing nonexistent public symbol\");void 0!==k[a].ea&&void 0!==c?k[a].ea[c]=b:(k[a]=b,k[a].pa=c)},jb=[],kb,lb=a=>{var b=jb[a];b||(a>=jb.length&&(jb.length=a+1),jb[a]=b=kb.get(a));return b},mb=(a,b,c=[])=>{if(a.includes(\"j\"))return a=a.replace(/p/g,\"i\"),(0,k[\"dynCall_\"+a])(b,...c);b=lb(b)(...c);return\"p\"==a[0]?b>>>0:b},nb=(a,b)=>(...c)=>mb(a,b,c),U=(a,b)=>{a=G(a);var c=a.includes(\"j\")||a.includes(\"p\")?nb(a,b):lb(b);if(\"function\"!=typeof c)throw new K(`unknown function pointer with signature ${a}: ${b}`);\nreturn c},ob,qb=a=>{a=pb(a);var b=G(a);V(a);return b},W=(a,b)=>{function c(g){e[g]||J[g]||(Ka[g]?Ka[g].forEach(c):(d.push(g),e[g]=!0))}var d=[],e={};b.forEach(c);throw new ob(`${a}: `+d.map(qb).join([\", \"]));},rb=a=>{for(;a.length;){var b=a.pop();a.pop()(b)}};function sb(a){for(var b=1;b<a.length;++b)if(null!==a[b]&&void 0===a[b].ia)return!0;return!1}\nfunction tb(a){var b=Function;if(!(b instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof b} which is not a function`);var c=S(b.name||\"unknownFunctionName\",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}\nfunction ub(a,b,c,d,e,g){var l=b.length;if(2>l)throw new K(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");var h=null!==b[1]&&null!==c,n=sb(b);c=\"void\"!==b[0].name;d=[a,La,d,e,rb,b[0],b[1]];for(e=0;e<l-2;++e)d.push(b[e+2]);if(!n)for(e=h?1:2;e<b.length;++e)null!==b[e].ia&&d.push(b[e].ia);n=sb(b);e=b.length;var m=\"\",p=\"\";for(l=0;l<e-2;++l)m+=(0!==l?\", \":\"\")+\"arg\"+l,p+=(0!==l?\", \":\"\")+\"arg\"+l+\"Wired\";m=`\\n        return function (${m}) {\\n        if (arguments.length !== ${e-\n2}) {\\n          throwBindingError('function ' + humanName + ' called with ' + arguments.length + ' arguments, expected ${e-2}');\\n        }`;n&&(m+=\"var destructors = [];\\n\");var u=n?\"destructors\":\"null\",v=\"humanName throwBindingError invoker fn runDestructors retType classParam\".split(\" \");h&&(m+=\"var thisWired = classParam['toWireType'](\"+u+\", this);\\n\");for(l=0;l<e-2;++l)m+=\"var arg\"+l+\"Wired = argType\"+l+\"['toWireType'](\"+u+\", arg\"+l+\");\\n\",v.push(\"argType\"+l);h&&(p=\"thisWired\"+(0<p.length?\", \":\n\"\")+p);m+=(c||g?\"var rv = \":\"\")+\"invoker(fn\"+(0<p.length?\", \":\"\")+p+\");\\n\";if(n)m+=\"runDestructors(destructors);\\n\";else for(l=h?1:2;l<b.length;++l)g=1===l?\"thisWired\":\"arg\"+(l-2)+\"Wired\",null!==b[l].ia&&(m+=`${g}_dtor(${g});\\n`,v.push(`${g}_dtor`));c&&(m+=\"var ret = retType['fromWireType'](rv);\\nreturn ret;\\n\");let [f,q]=[v,m+\"}\\n\"];f.push(q);b=tb(f)(...d);return S(a,b)}\nvar vb=(a,b)=>{for(var c=[],d=0;d<a;d++)c.push(C[b+4*d>>>2>>>0]);return c},wb=a=>{a=a.trim();const b=a.indexOf(\"(\");return-1!==b?a.substr(0,b):a},xb=(a,b,c)=>{if(!(a instanceof Object))throw new K(`${c} with invalid \"this\": ${a}`);if(!(a instanceof b.ba.constructor))throw new K(`${c} incompatible with \"this\" of type ${a.constructor.name}`);if(!a.R.ca)throw new K(`cannot call emscripten binding method ${c} on deleted object`);return bb(a.R.ca,a.R.da.ba,b.ba)},yb=[],X=[];\nfunction zb(a){a>>>=0;9<a&&0===--X[a+1]&&(X[a]=void 0,yb.push(a))}var Y=a=>{if(!a)throw new K(\"Cannot use deleted val. handle = \"+a);return X[a]},T=a=>{switch(a){case void 0:return 2;case null:return 4;case !0:return 6;case !1:return 8;default:const b=yb.pop()||X.length;X[b]=a;X[b+1]=1;return b}},Bb={name:\"emscripten::val\",fromWireType:a=>{var b=Y(a);zb(a);return b},toWireType:(a,b)=>T(b),argPackAdvance:8,readValueFromPointer:gb,ia:null};function Cb(a){return N(a>>>0,Bb)}\nvar Db=(a,b,c)=>{switch(b){case 1:return c?function(d){return this.fromWireType(w[d>>>0])}:function(d){return this.fromWireType(x[d>>>0])};case 2:return c?function(d){return this.fromWireType(y[d>>>1>>>0])}:function(d){return this.fromWireType(z[d>>>1>>>0])};case 4:return c?function(d){return this.fromWireType(A[d>>>2>>>0])}:function(d){return this.fromWireType(C[d>>>2>>>0])};default:throw new TypeError(`invalid integer width (${b}): ${a}`);}},Eb=(a,b)=>{var c=J[a];if(void 0===c)throw a=`${b} has unknown type ${qb(a)}`,\nnew K(a);return c},db=a=>{if(null===a)return\"null\";var b=typeof a;return\"object\"===b||\"array\"===b||\"function\"===b?a.toString():\"\"+a},Fb=(a,b)=>{switch(b){case 4:return function(c){return this.fromWireType(oa[c>>>2>>>0])};case 8:return function(c){return this.fromWireType(pa[c>>>3>>>0])};default:throw new TypeError(`invalid float width (${b}): ${a}`);}},Gb=(a,b,c)=>{switch(b){case 1:return c?d=>w[d>>>0]:d=>x[d>>>0];case 2:return c?d=>y[d>>>1>>>0]:d=>z[d>>>1>>>0];case 4:return c?d=>A[d>>>2>>>0]:d=>\nC[d>>>2>>>0];default:throw new TypeError(`invalid integer width (${b}): ${a}`);}},Hb=(a,b,c,d)=>{c>>>=0;if(0<d){d=c+d-1;for(var e=0;e<a.length;++e){var g=a.charCodeAt(e);if(55296<=g&&57343>=g){var l=a.charCodeAt(++e);g=65536+((g&1023)<<10)|l&1023}if(127>=g){if(c>=d)break;b[c++>>>0]=g}else{if(2047>=g){if(c+1>=d)break;b[c++>>>0]=192|g>>6}else{if(65535>=g){if(c+2>=d)break;b[c++>>>0]=224|g>>12}else{if(c+3>=d)break;b[c++>>>0]=240|g>>18;b[c++>>>0]=128|g>>12&63}b[c++>>>0]=128|g>>6&63}b[c++>>>0]=128|g&63}}b[c>>>\n0]=0}},Ib=a=>{for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);127>=d?b++:2047>=d?b+=2:55296<=d&&57343>=d?(b+=4,++c):b+=3}return b},Jb=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,Kb=(a,b)=>{a>>>=0;if(a){var c=x;a>>>=0;var d=a+b;for(b=a;c[b]&&!(b>=d);)++b;if(16<b-a&&c.buffer&&Jb)c=Jb.decode(c.subarray(a,b));else{for(d=\"\";a<b;){var e=c[a++];if(e&128){var g=c[a++]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|g);else{var l=c[a++]&63;e=224==(e&240)?(e&15)<<12|g<<6|l:(e&7)<<\n18|g<<12|l<<6|c[a++]&63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023))}}else d+=String.fromCharCode(e)}c=d}}else c=\"\";return c},Lb=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0,Mb=(a,b)=>{var c=a>>1;for(var d=c+b/2;!(c>=d)&&z[c>>>0];)++c;c<<=1;if(32<c-a&&Lb)return Lb.decode(x.subarray(a>>>0,c>>>0));c=\"\";for(d=0;!(d>=b/2);++d){var e=y[a+2*d>>>1>>>0];if(0==e)break;c+=String.fromCharCode(e)}return c},Nb=(a,b,c)=>{c??=2147483647;if(2>\nc)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var e=0;e<c;++e)y[b>>>1>>>0]=a.charCodeAt(e),b+=2;y[b>>>1>>>0]=0;return b-d},Ob=a=>2*a.length,Pb=(a,b)=>{for(var c=0,d=\"\";!(c>=b/4);){var e=A[a+4*c>>>2>>>0];if(0==e)break;++c;65536<=e?(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023)):d+=String.fromCharCode(e)}return d},Qb=(a,b,c)=>{b>>>=0;c??=2147483647;if(4>c)return 0;var d=b;c=d+c-4;for(var e=0;e<a.length;++e){var g=a.charCodeAt(e);if(55296<=g&&57343>=g){var l=a.charCodeAt(++e);g=\n65536+((g&1023)<<10)|l&1023}A[b>>>2>>>0]=g;b+=4;if(b+4>c)break}A[b>>>2>>>0]=0;return b-d},Rb=a=>{for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b},Sb=(a,b,c)=>{var d=[];a=a.toWireType(d,c);d.length&&(C[b>>>2>>>0]=T(d));return a},Tb={},Ub=a=>{var b=Tb[a];return void 0===b?G(a):b},Vb=[],Wb=a=>{var b=Vb.length;Vb.push(a);return b},Xb=(a,b)=>{for(var c=Array(a),d=0;d<a;++d)c[d]=Eb(C[b+4*d>>>2>>>0],\"parameter \"+d);return c},Yb={},$b=()=>{if(!Zb){var a={USER:\"web_user\",\nLOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ha||\"./this.program\"},b;for(b in Yb)void 0===Yb[b]?delete a[b]:a[b]=Yb[b];var c=[];for(b in a)c.push(`${b}=${a[b]}`);Zb=c}return Zb},Zb,ac=()=>{if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues)return a=>crypto.getRandomValues(a);xa(\"initRandomDevice\")},bc=a=>(bc=ac())(a),cc=a=>0===a%4&&(0!==a%100||0===a%400),\ndc=[31,29,31,30,31,30,31,31,30,31,30,31],ec=[31,28,31,30,31,30,31,31,30,31,30,31];function fc(a){var b=Array(Ib(a)+1);Hb(a,b,0,b.length);return b}\nfunction gc(a,b,c,d){function e(f,q,t){for(f=\"number\"==typeof f?f.toString():f||\"\";f.length<q;)f=t[0]+f;return f}function g(f,q){return e(f,q,\"0\")}function l(f,q){function t(H){return 0>H?-1:0<H?1:0}var B;0===(B=t(f.getFullYear()-q.getFullYear()))&&0===(B=t(f.getMonth()-q.getMonth()))&&(B=t(f.getDate()-q.getDate()));return B}function h(f){switch(f.getDay()){case 0:return new Date(f.getFullYear()-1,11,29);case 1:return f;case 2:return new Date(f.getFullYear(),0,3);case 3:return new Date(f.getFullYear(),\n0,2);case 4:return new Date(f.getFullYear(),0,1);case 5:return new Date(f.getFullYear()-1,11,31);case 6:return new Date(f.getFullYear()-1,11,30)}}function n(f){var q=f.na;for(f=new Date((new Date(f.oa+1900,0,1)).getTime());0<q;){var t=f.getMonth(),B=(cc(f.getFullYear())?dc:ec)[t];if(q>B-f.getDate())q-=B-f.getDate()+1,f.setDate(1),11>t?f.setMonth(t+1):(f.setMonth(0),f.setFullYear(f.getFullYear()+1));else{f.setDate(f.getDate()+q);break}}t=new Date(f.getFullYear()+1,0,4);q=h(new Date(f.getFullYear(),\n0,4));t=h(t);return 0>=l(q,f)?0>=l(t,f)?f.getFullYear()+1:f.getFullYear():f.getFullYear()-1}a>>>=0;b>>>=0;c>>>=0;d>>>=0;var m=C[d+40>>>2>>>0];d={Pa:A[d>>>2>>>0],Oa:A[d+4>>>2>>>0],wa:A[d+8>>>2>>>0],za:A[d+12>>>2>>>0],xa:A[d+16>>>2>>>0],oa:A[d+20>>>2>>>0],ja:A[d+24>>>2>>>0],na:A[d+28>>>2>>>0],Sa:A[d+32>>>2>>>0],Na:A[d+36>>>2>>>0],Qa:m?Kb(m):\"\"};c=Kb(c);m={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\n\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var p in m)c=c.replace(new RegExp(p,\"g\"),m[p]);var u=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),v=\"January February March April May June July August September October November December\".split(\" \");m={\"%a\":f=>u[f.ja].substring(0,3),\"%A\":f=>u[f.ja],\"%b\":f=>\nv[f.xa].substring(0,3),\"%B\":f=>v[f.xa],\"%C\":f=>g((f.oa+1900)/100|0,2),\"%d\":f=>g(f.za,2),\"%e\":f=>e(f.za,2,\" \"),\"%g\":f=>n(f).toString().substring(2),\"%G\":n,\"%H\":f=>g(f.wa,2),\"%I\":f=>{f=f.wa;0==f?f=12:12<f&&(f-=12);return g(f,2)},\"%j\":f=>{for(var q=0,t=0;t<=f.xa-1;q+=(cc(f.oa+1900)?dc:ec)[t++]);return g(f.za+q,3)},\"%m\":f=>g(f.xa+1,2),\"%M\":f=>g(f.Oa,2),\"%n\":()=>\"\\n\",\"%p\":f=>0<=f.wa&&12>f.wa?\"AM\":\"PM\",\"%S\":f=>g(f.Pa,2),\"%t\":()=>\"\\t\",\"%u\":f=>f.ja||7,\"%U\":f=>g(Math.floor((f.na+7-f.ja)/7),2),\"%V\":f=>{var q=\nMath.floor((f.na+7-(f.ja+6)%7)/7);2>=(f.ja+371-f.na-2)%7&&q++;if(q)53==q&&(t=(f.ja+371-f.na)%7,4==t||3==t&&cc(f.oa)||(q=1));else{q=52;var t=(f.ja+7-f.na-1)%7;(4==t||5==t&&cc(f.oa%400-1))&&q++}return g(q,2)},\"%w\":f=>f.ja,\"%W\":f=>g(Math.floor((f.na+7-(f.ja+6)%7)/7),2),\"%y\":f=>(f.oa+1900).toString().substring(2),\"%Y\":f=>f.oa+1900,\"%z\":f=>{f=f.Na;var q=0<=f;f=Math.abs(f)/60;return(q?\"+\":\"-\")+String(\"0000\"+(f/60*100+f%60)).slice(-4)},\"%Z\":f=>f.Qa,\"%%\":()=>\"%\"};c=c.replace(/%%/g,\"\\x00\\x00\");for(p in m)c.includes(p)&&\n(c=c.replace(new RegExp(p,\"g\"),m[p](d)));c=c.replace(/\\0\\0/g,\"%\");p=fc(c);if(p.length>b)return 0;w.set(p,a>>>0);return p.length-1}for(var hc=Array(256),ic=0;256>ic;++ic)hc[ic]=String.fromCharCode(ic);Ja=hc;K=k.BindingError=class extends Error{constructor(a){super(a);this.name=\"BindingError\"}};M=k.InternalError=class extends Error{constructor(a){super(a);this.name=\"InternalError\"}};\nObject.assign(Xa.prototype,{isAliasOf:function(a){if(!(this instanceof Xa&&a instanceof Xa))return!1;var b=this.R.da.ba,c=this.R.ca;a.R=a.R;var d=a.R.da.ba;for(a=a.R.ca;b.ga;)c=b.sa(c),b=b.ga;for(;d.ga;)a=d.sa(a),d=d.ga;return b===d&&c===a},clone:function(){this.R.ca||Na(this);if(this.R.ra)return this.R.count.value+=1,this;var a=Va,b=Object,c=b.create,d=Object.getPrototypeOf(this),e=this.R;a=a(c.call(b,d,{R:{value:{count:e.count,qa:e.qa,ra:e.ra,ca:e.ca,da:e.da,fa:e.fa,ha:e.ha}}}));a.R.count.value+=\n1;a.R.qa=!1;return a},[\"delete\"](){this.R.ca||Na(this);if(this.R.qa&&!this.R.ra)throw new K(\"Object already scheduled for deletion\");Qa(this);var a=this.R;--a.count.value;0===a.count.value&&(a.fa?a.ha.la(a.fa):a.da.ba.la(a.ca));this.R.ra||(this.R.fa=void 0,this.R.ca=void 0)},isDeleted:function(){return!this.R.ca},deleteLater:function(){this.R.ca||Na(this);if(this.R.qa&&!this.R.ra)throw new K(\"Object already scheduled for deletion\");P.push(this);1===P.length&&Q&&Q(Ta);this.R.qa=!0;return this}});\nk.getInheritedInstanceCount=()=>Object.keys(R).length;k.getLiveInheritedInstances=()=>{var a=[],b;for(b in R)R.hasOwnProperty(b)&&a.push(R[b]);return a};k.flushPendingDeletes=Ta;k.setDelayFunction=a=>{Q=a;P.length&&Q&&Q(Ta)};\nObject.assign(hb.prototype,{Fa(a){this.Ba&&(a=this.Ba(a));return a},Aa(a){this.la?.(a)},argPackAdvance:8,readValueFromPointer:gb,fromWireType:function(a){function b(){return this.va?Wa(this.ba.ka,{da:this.Ia,ca:c,ha:this,fa:a}):Wa(this.ba.ka,{da:this,ca:a})}var c=this.Fa(a);if(!c)return this.Aa(a),null;var d=Ua(this.ba,c);if(void 0!==d){if(0===d.R.count.value)return d.R.ca=c,d.R.fa=a,d.clone();d=d.clone();this.Aa(a);return d}d=this.ba.Ea(c);d=Sa[d];if(!d)return b.call(this);d=this.ua?d.Ca:d.pointerType;\nvar e=Ra(c,this.ba,d.ba);return null===e?b.call(this):this.va?Wa(d.ba.ka,{da:d,ca:e,ha:this,fa:a}):Wa(d.ba.ka,{da:d,ca:e})}});ob=k.UnboundTypeError=((a,b)=>{var c=S(b,function(d){this.name=b;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+\"\\n\"+d.replace(/^Error(:[^\\n]*)?\\n/,\"\"))});c.prototype=Object.create(a.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:`${this.name}: ${this.message}`};return c})(Error,\"UnboundTypeError\");\nX.push(0,1,void 0,1,null,1,!0,1,!1,1);k.count_emval_handles=()=>X.length/2-5-yb.length;\nvar kc={a:function(a,b,c){a>>>=0;var d=new Ga(a);C[d.ca+16>>>2>>>0]=0;C[d.ca+4>>>2>>>0]=b>>>0;C[d.ca+8>>>2>>>0]=c>>>0;Ha=a;Ia++;throw Ha;},J:()=>{xa(\"\")},D:function(){},G:function(a,b,c,d){b=G(b>>>0);N(a>>>0,{name:b,fromWireType:function(e){return!!e},toWireType:function(e,g){return g?c:d},argPackAdvance:8,readValueFromPointer:function(e){return this.fromWireType(x[e>>>0])},ia:null})},e:function(a,b,c,d,e,g,l,h,n,m,p,u,v){a>>>=0;b>>>=0;c>>>=0;d>>>=0;g>>>=0;l>>>=0;h>>>=0;n>>>=0;m>>>=0;p>>>=0;u>>>=\n0;v>>>=0;p=G(p);g=U(e>>>0,g);h&&=U(l,h);m&&=U(n,m);v=U(u,v);var f=$a(p);Za(f,function(){W(`Cannot construct ${p} due to unbound types`,[d])});O([a,b,c],d?[d]:[],q=>{q=q[0];if(d){var t=q.ba;var B=t.ka}else B=Xa.prototype;q=S(p,function(...Pa){if(Object.getPrototypeOf(this)!==H)throw new K(\"Use 'new' to construct \"+p);if(void 0===E.ma)throw new K(p+\" has no accessible constructor\");var Ab=E.ma[Pa.length];if(void 0===Ab)throw new K(`Tried to invoke ctor of ${p} with invalid number of parameters (${Pa.length}) - expected (${Object.keys(E.ma).toString()}) parameters instead!`);\nreturn Ab.apply(this,Pa)});var H=Object.create(B,{constructor:{value:q}});q.prototype=H;var E=new ab(p,q,H,v,t,g,h,m);if(E.ga){var L;(L=E.ga).ta??(L.ta=[]);E.ga.ta.push(E)}t=new hb(p,E,!0,!1,!1);L=new hb(p+\"*\",E,!1,!1,!1);B=new hb(p+\" const*\",E,!1,!0,!1);Sa[a]={pointerType:L,Ca:B};ib(f,q);return[t,L,B]})},s:function(a,b,c,d,e,g,l,h){a>>>=0;b>>>=0;e>>>=0;g>>>=0;l>>>=0;var n=vb(c,d>>>0);b=G(b);b=wb(b);g=U(e,g);O([],[a],m=>{function p(){W(`Cannot call ${u} due to unbound types`,n)}m=m[0];var u=`${m.name}.${b}`;\nb.startsWith(\"@@\")&&(b=Symbol[b.substring(2)]);var v=m.ba.constructor;void 0===v[b]?(p.pa=c-1,v[b]=p):(Ya(v,b,u),v[b].ea[c-1]=p);O([],n,f=>{f=ub(u,[f[0],null].concat(f.slice(1)),null,g,l,h);void 0===v[b].ea?(f.pa=c-1,v[b]=f):v[b].ea[c-1]=f;if(m.ba.ta)for(const q of m.ba.ta)q.constructor.hasOwnProperty(b)||(q.constructor[b]=f);return[]});return[]})},y:function(a,b,c,d,e,g,l,h){a>>>=0;b>>>=0;c>>>=0;d>>>=0;g>>>=0;l>>>=0;h>>>=0;b=G(b);g=U(e>>>0,g);O([],[a],n=>{n=n[0];var m=`${n.name}.${b}`,p={get(){W(`Cannot access ${m} due to unbound types`,\n[c])},enumerable:!0,configurable:!0};p.set=h?()=>{W(`Cannot access ${m} due to unbound types`,[c])}:()=>{throw new K(`${m} is a read-only property`);};Object.defineProperty(n.ba.constructor,b,p);O([],[c],u=>{u=u[0];var v={get(){return u.fromWireType(g(d))},enumerable:!0};h&&(h=U(l,h),v.set=f=>{var q=[];h(d,u.toWireType(q,f));rb(q)});Object.defineProperty(n.ba.constructor,b,v);return[]});return[]})},f:function(a,b,c,d,e,g){a>>>=0;d>>>=0;e>>>=0;g>>>=0;var l=vb(b,c>>>0);e=U(d,e);O([],[a],h=>{h=h[0];\nvar n=`constructor ${h.name}`;void 0===h.ba.ma&&(h.ba.ma=[]);if(void 0!==h.ba.ma[b-1])throw new K(`Cannot register multiple constructors with identical number of parameters (${b-1}) for class '${h.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);h.ba.ma[b-1]=()=>{W(`Cannot construct ${h.name} due to unbound types`,l)};O([],l,m=>{m.splice(1,0,null);h.ba.ma[b-1]=ub(n,m,null,e,g);return[]});return[]})},b:function(a,b,c,d,e,g,l,h,n){a>>>=0;b>>>=\n0;e>>>=0;g>>>=0;l>>>=0;var m=vb(c,d>>>0);b=G(b);b=wb(b);g=U(e,g);O([],[a],p=>{function u(){W(`Cannot call ${v} due to unbound types`,m)}p=p[0];var v=`${p.name}.${b}`;b.startsWith(\"@@\")&&(b=Symbol[b.substring(2)]);h&&p.ba.Ja.push(b);var f=p.ba.ka,q=f[b];void 0===q||void 0===q.ea&&q.className!==p.name&&q.pa===c-2?(u.pa=c-2,u.className=p.name,f[b]=u):(Ya(f,b,v),f[b].ea[c-2]=u);O([],m,t=>{t=ub(v,t,p,g,l,n);void 0===f[b].ea?(t.pa=c-2,f[b]=t):f[b].ea[c-2]=t;return[]});return[]})},t:function(a,b,c,d,e,g,\nl,h,n,m){a>>>=0;b>>>=0;c>>>=0;e>>>=0;g>>>=0;l>>>=0;h>>>=0;n>>>=0;m>>>=0;b=G(b);e=U(d>>>0,e);O([],[a],p=>{p=p[0];var u=`${p.name}.${b}`,v={get(){W(`Cannot access ${u} due to unbound types`,[c,l])},enumerable:!0,configurable:!0};v.set=n?()=>W(`Cannot access ${u} due to unbound types`,[c,l]):()=>{throw new K(u+\" is a read-only property\");};Object.defineProperty(p.ba.ka,b,v);O([],n?[c,l]:[c],f=>{var q=f[0],t={get(){var H=xb(this,p,u+\" getter\");return q.fromWireType(e(g,H))},enumerable:!0};if(n){n=U(h,\nn);var B=f[1];t.set=function(H){var E=xb(this,p,u+\" setter\"),L=[];n(m,E,B.toWireType(L,H));rb(L)}}Object.defineProperty(p.ba.ka,b,t);return[]});return[]})},F:Cb,v:function(a,b,c,d){function e(){}b=G(b>>>0);e.values={};N(a>>>0,{name:b,constructor:e,fromWireType:function(g){return this.constructor.values[g]},toWireType:(g,l)=>l.value,argPackAdvance:8,readValueFromPointer:Db(b,c>>>0,d),ia:null});Za(b,e)},p:function(a,b,c){b>>>=0;var d=Eb(a>>>0,\"enum\");b=G(b);a=d.constructor;d=Object.create(d.constructor.prototype,\n{value:{value:c},constructor:{value:S(`${d.name}_${b}`,function(){})}});a.values[c]=d;a[b]=d},w:function(a,b,c){b=G(b>>>0);N(a>>>0,{name:b,fromWireType:d=>d,toWireType:(d,e)=>e,argPackAdvance:8,readValueFromPointer:Fb(b,c>>>0),ia:null})},o:function(a,b,c,d,e,g,l){a>>>=0;d>>>=0;e>>>=0;g>>>=0;var h=vb(b,c>>>0);a=G(a);a=wb(a);e=U(d,e);Za(a,function(){W(`Cannot call ${a} due to unbound types`,h)},b-1);O([],h,n=>{ib(a,ub(a,[n[0],null].concat(n.slice(1)),null,e,g,l),b-1);return[]})},r:function(a,b,c,d,\ne){a>>>=0;c>>>=0;b=G(b>>>0);-1===e&&(e=4294967295);e=h=>h;if(0===d){var g=32-8*c;e=h=>h<<g>>>g}var l=b.includes(\"unsigned\")?function(h,n){return n>>>0}:function(h,n){return n};N(a,{name:b,fromWireType:e,toWireType:l,argPackAdvance:8,readValueFromPointer:Gb(b,c,0!==d),ia:null})},k:function(a,b,c){function d(g){return new e(w.buffer,C[g+4>>>2>>>0],C[g>>>2>>>0])}var e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][b];c=G(c>>>0);N(a>>>0,{name:c,fromWireType:d,\nargPackAdvance:8,readValueFromPointer:d},{Ga:!0})},q:function(a){Cb(a>>>0)},x:function(a,b){b=G(b>>>0);var c=\"std::string\"===b;N(a>>>0,{name:b,fromWireType:function(d){var e=C[d>>>2>>>0],g=d+4;if(c)for(var l=g,h=0;h<=e;++h){var n=g+h;if(h==e||0==x[n>>>0]){l=Kb(l,n-l);if(void 0===m)var m=l;else m+=String.fromCharCode(0),m+=l;l=n+1}}else{m=Array(e);for(h=0;h<e;++h)m[h]=String.fromCharCode(x[g+h>>>0]);m=m.join(\"\")}V(d);return m},toWireType:function(d,e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));\nvar g=\"string\"==typeof e;if(!(g||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array))throw new K(\"Cannot pass non-string to std::string\");var l=c&&g?Ib(e):e.length;var h=jc(4+l+1),n=h+4;C[h>>>2>>>0]=l;if(c&&g)Hb(e,x,n,l+1);else if(g)for(g=0;g<l;++g){var m=e.charCodeAt(g);if(255<m)throw V(n),new K(\"String has UTF-16 code units that do not fit in 8 bits\");x[n+g>>>0]=m}else for(g=0;g<l;++g)x[n+g>>>0]=e[g];null!==d&&d.push(V,h);return h},argPackAdvance:8,readValueFromPointer:gb,\nia(d){V(d)}})},u:function(a,b,c){b>>>=0;c>>>=0;c=G(c);if(2===b){var d=Mb;var e=Nb;var g=Ob;var l=h=>z[h>>>1>>>0]}else 4===b&&(d=Pb,e=Qb,g=Rb,l=h=>C[h>>>2>>>0]);N(a>>>0,{name:c,fromWireType:h=>{for(var n=C[h>>>2>>>0],m,p=h+4,u=0;u<=n;++u){var v=h+4+u*b;if(u==n||0==l(v))p=d(p,v-p),void 0===m?m=p:(m+=String.fromCharCode(0),m+=p),p=v+b}V(h);return m},toWireType:(h,n)=>{if(\"string\"!=typeof n)throw new K(`Cannot pass non-string to C++ string type ${c}`);var m=g(n),p=jc(4+m+b);C[p>>>2>>>0]=m/b;e(n,p+4,m+\nb);null!==h&&h.push(V,p);return p},argPackAdvance:8,readValueFromPointer:gb,ia(h){V(h)}})},H:function(a,b){b=G(b>>>0);N(a>>>0,{Ha:!0,name:b,argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})},K:function(a,b,c){b>>>=0;return x.copyWithin(a>>>0>>>0,b>>>0,b+(c>>>0)>>>0)},h:function(a,b,c){b>>>=0;c>>>=0;a=Y(a>>>0);b=Eb(b,\"emval::as\");return Sb(b,c,a)},m:function(a,b,c,d,e){c>>>=0;d>>>=0;e>>>=0;a=Vb[a>>>0];b=Y(b>>>0);c=Ub(c);return a(b,b[c],d,e)},c:zb,l:function(a,b,c){b=Xb(a,b>>>0);var d=b.shift();\na--;var e=\"return function (obj, func, destructorsRef, args) {\\n\",g=0,l=[];0===c&&l.push(\"obj\");for(var h=[\"retType\"],n=[d],m=0;m<a;++m)l.push(\"arg\"+m),h.push(\"argType\"+m),n.push(b[m]),e+=`  var arg${m} = argType${m}.readValueFromPointer(args${g?\"+\"+g:\"\"});\\n`,g+=b[m].argPackAdvance;e+=`  var rv = ${1===c?\"new func\":\"func.call\"}(${l.join(\", \")});\\n`;d.Ha||(h.push(\"emval_returnValue\"),n.push(Sb),e+=\"  return emval_returnValue(retType, destructorsRef, rv);\\n\");h.push(e+\"};\\n\");a=tb(h)(...n);c=`methodCaller<(${b.map(p=>\np.name).join(\", \")}) => ${d.name}>`;return Wb(S(c,a))},i:function(a,b){b>>>=0;a=Y(a>>>0);b=Y(b);return T(a[b])},n:function(a){a>>>=0;9<a&&(X[a+1]+=1)},E:function(){return T([])},j:function(a){return T(Ub(a>>>0))},d:function(a){a>>>=0;var b=Y(a);rb(b);zb(a)},g:function(a,b){b>>>=0;a=Eb(a>>>0,\"_emval_take_value\");a=a.readValueFromPointer(b);return T(a)},I:function(a){a>>>=0;var b=x.length;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);var e=Math;d=Math.max(a,\nd);a:{e=(e.min.call(e,4294901760,d+(65536-d%65536)%65536)-ma.buffer.byteLength+65535)/65536;try{ma.grow(e);qa();var g=1;break a}catch(l){}g=void 0}if(g)return!0}return!1},B:function(a,b){a>>>=0;b>>>=0;var c=0;$b().forEach((d,e)=>{var g=b+c;e=C[a+4*e>>>2>>>0]=g;for(g=0;g<d.length;++g)w[e++>>>0]=d.charCodeAt(g);w[e>>>0]=0;c+=d.length+1});return 0},C:function(a,b){a>>>=0;b>>>=0;var c=$b();C[a>>>2>>>0]=c.length;var d=0;c.forEach(e=>d+=e.length+1);C[b>>>2>>>0]=d;return 0},z:function(a,b){a>>>=0;bc(x.subarray(a>>>\n0,a+(b>>>0)>>>0));return 0},A:function(a,b,c,d){return gc(a>>>0,b>>>0,c>>>0,d>>>0)}},Z=function(){function a(c){Z=c.exports;Z=lc();ma=Z.L;qa();kb=Z.S;sa.unshift(Z.M);D--;k.monitorRunDependencies?.(D);0==D&&(null!==wa&&(clearInterval(wa),wa=null),F&&(c=F,F=null,c()));return Z}var b={a:kc};D++;k.monitorRunDependencies?.(D);if(k.instantiateWasm)try{return k.instantiateWasm(b,a)}catch(c){ka(`Module.instantiateWasm callback failed with error: ${c}`),ba(c)}za||=\"data:application/octet-stream;base64,\";Ca(b,function(c){a(c.instance)}).catch(ba);\nreturn{}}(),mc=k._main=(a,b)=>(mc=k._main=Z.N)(a,b),pb=a=>(pb=Z.O)(a),jc=a=>(jc=Z.P)(a),V=a=>(V=Z.Q)(a);k.dynCall_viij=(a,b,c,d,e)=>(k.dynCall_viij=Z.T)(a,b,c,d,e);k.dynCall_viiij=(a,b,c,d,e,g)=>(k.dynCall_viiij=Z.U)(a,b,c,d,e,g);k.dynCall_iiiij=(a,b,c,d,e,g)=>(k.dynCall_iiiij=Z.V)(a,b,c,d,e,g);k.dynCall_vij=(a,b,c,d)=>(k.dynCall_vij=Z.W)(a,b,c,d);k.dynCall_iij=(a,b,c,d)=>(k.dynCall_iij=Z.X)(a,b,c,d);k.dynCall_iiij=(a,b,c,d,e)=>(k.dynCall_iiij=Z.Y)(a,b,c,d,e);\nk.dynCall_viijii=(a,b,c,d,e,g,l)=>(k.dynCall_viijii=Z.Z)(a,b,c,d,e,g,l);k.dynCall_iiiiij=(a,b,c,d,e,g,l)=>(k.dynCall_iiiiij=Z._)(a,b,c,d,e,g,l);k.dynCall_iiiiijj=(a,b,c,d,e,g,l,h,n)=>(k.dynCall_iiiiijj=Z.$)(a,b,c,d,e,g,l,h,n);k.dynCall_iiiiiijj=(a,b,c,d,e,g,l,h,n,m)=>(k.dynCall_iiiiiijj=Z.aa)(a,b,c,d,e,g,l,h,n,m);\nfunction lc(){var a=Z;a=Object.assign({},a);var b=c=>d=>c(d)>>>0;a.O=b(a.O);a.P=b(a.P);a._emscripten_stack_alloc=b(a._emscripten_stack_alloc);a.emscripten_stack_get_current=(c=>()=>c()>>>0)(a.emscripten_stack_get_current);return a}var nc;F=function oc(){nc||pc();nc||(F=oc)};\nfunction pc(){function a(){if(!nc&&(nc=!0,k.calledRun=!0,!na)){Ea(sa);Ea(ta);aa(k);if(k.onRuntimeInitialized)k.onRuntimeInitialized();if(qc){var b=mc;try{var c=b(0,0);Fa||(k.onExit?.(c),na=!0);ia(c,new Da(c))}catch(d){d instanceof Da||\"unwind\"==d||ia(1,d)}}if(k.postRun)for(\"function\"==typeof k.postRun&&(k.postRun=[k.postRun]);k.postRun.length;)b=k.postRun.shift(),ua.unshift(b);Ea(ua)}}if(!(0<D)){if(k.preRun)for(\"function\"==typeof k.preRun&&(k.preRun=[k.preRun]);k.preRun.length;)va();Ea(ra);0<D||(k.setStatus?\n(k.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){k.setStatus(\"\")},1);a()},1)):a())}}if(k.preInit)for(\"function\"==typeof k.preInit&&(k.preInit=[k.preInit]);0<k.preInit.length;)k.preInit.pop()();var qc=!0;k.noInitialRun&&(qc=!1);pc();moduleRtn=ca;\n\n\n  return moduleRtn;\n}\n);\n})();\nexport default Module;\n","import { Library } from '../implementation/seal'\n\nexport type Loader = {\n  readonly library: Library\n}\n\n/**\n * Export a default function which instantiates the library\n * @param {Object} bin Emscripten library to initialize\n */\nexport const createLoader = async (\n  bin: () => Promise<Library>\n): Promise<Loader> => ({\n  library: await bin()\n})\n","export const INSTANCE_DELETED = 'Instance was deleted'\nexport const UNSUPPORTED_VECTOR_TYPE = 'Unsupported vector type'\nexport const UNSUPPORTED_BITSIZES_TYPE =\n  'Unsupported argument type! `bitSizes` must be an Int32Array'\nexport const UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Int32Array, Uint32Array, BigInt64Array, or BigUint64Array.'\nexport const UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Float64Array.'\nexport const INVALID_PLAIN_CONSRUCTOR_OPTIONS =\n  'Must specify a (coeffCount), (coeffCount, capacity)'\nexport const INVALID_CIPHER_CONSTRUCTOR_OPTIONS =\n  'Must specify a (context), (context, parmsId), or (context, parmsId, sizeCapacity)'\n","import { UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE } from './constants'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type BatchEncoderDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type BatchEncoderDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions\n}\n\nexport type BatchEncoderConstructorOptions = {\n  (context: Context): BatchEncoder\n}\n\nexport type BatchEncoderTypes =\n  | Int32Array\n  | Uint32Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport type BatchEncoder = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: BatchEncoderTypes,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => Int32Array | Uint32Array\n  readonly decodeBigInt: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => BigInt64Array | BigUint64Array\n  readonly slotCount: number\n}\n\nconst BatchEncoderConstructor =\n  (library: Library): BatchEncoderDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions =>\n  (context): BatchEncoder => {\n    const Constructor = library.BatchEncoder\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements BatchEncoder\n     */\n\n    /**\n     * @interface BatchEncoder\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name BatchEncoder#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name BatchEncoder#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name BatchEncoder#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Creates a PlainText from a given matrix. This function \"batches\" a given matrix\n       * of either signed or unsigned integers modulo the PlainText modulus into a PlainText element, and stores\n       * the result in the destination parameter. The input array must have size at most equal\n       * to the degree of the polynomial modulus. The first half of the elements represent the\n       * first row of the matrix, and the second half represent the second row. The numbers\n       * in the matrix can be at most equal to the PlainText modulus for it to represent\n       * a valid PlainText.\n       *\n       * If the destination PlainText overlaps the input values in memory, the behavior of\n       * this function is undefined.\n       *\n       * @function\n       * @name BatchEncoder#encode\n       * @param {Int32Array|Uint32Array|BigInt64Array|BigUint64Array} array Data to encode\n       * @param {PlainText} [plainText=null] Destination to store the encoded result\n       * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n       */\n      encode(\n        array: Int32Array | Uint32Array | BigInt64Array | BigUint64Array,\n        plainText?: PlainText\n      ): PlainText | void {\n        try {\n          if (array.constructor === Int32Array) {\n            if (plainText) {\n              _instance.encode(array, plainText.instance, 'INT32')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, plain.instance, 'INT32')\n            return plain\n          }\n\n          if (array.constructor === Uint32Array) {\n            if (plainText) {\n              _instance.encode(array, plainText.instance, 'UINT32')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, plain.instance, 'UINT32')\n            return plain\n          }\n\n          if (array.constructor === BigInt64Array) {\n            // When embind supports BigInt64Arrays we can remove this hack\n            const stringArray = array.toString().split(',')\n            if (plainText) {\n              _instance.encode(stringArray, plainText.instance, 'INT64')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(stringArray, plain.instance, 'INT64')\n            return plain\n          }\n\n          if (array.constructor === BigUint64Array) {\n            // When embind supports BigInt64Arrays we can remove this hack\n            const stringArray = array.toString().split(',')\n            if (plainText) {\n              _instance.encode(stringArray, plainText.instance, 'UINT64')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(stringArray, plain.instance, 'UINT64')\n            return plain\n          }\n\n          throw new Error(UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Inverse of encode. This function \"unbatches\" a given PlainText into a matrix\n       * of signed or unsigned integers modulo the PlainText modulus, and stores the result in the destination\n       * parameter. The input PlainText must have degrees less than the polynomial modulus,\n       * and coefficients less than the PlainText modulus, i.e. it must be a valid PlainText\n       * for the encryption parameters. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name BatchEncoder#decode\n       * @param {PlainText} plainText Data to decode\n       * @param {boolean} [signed=true] By default, decode as an Int32Array. If false, decode as an Uint32Array\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * @returns {Int32Array|Uint32Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n       * const plainTextU = batchEncoder.encode(Uint32Array.from([1, 2, 3]))\n       *\n       * const result = batchEncoder.decode(plainText)\n       * const resultU = batchEncoder.decode(plainTextU, false) // To decode as an Uint32Array\n       */\n      decode(\n        plainText: PlainText,\n        signed = true,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Int32Array | Uint32Array {\n        try {\n          if (signed) {\n            const tempVect = Vector()\n            const instance = _instance.decodeInt32(plainText.instance, pool)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Int32Array')\n            const tempArr = tempVect.toArray() as Int32Array\n            tempVect.delete()\n            return tempArr\n          }\n          const tempVect = Vector()\n          const instance = _instance.decodeUint32(plainText.instance, pool)\n          tempVect.unsafeInject(instance)\n          tempVect.setType('Uint32Array')\n          const tempArr = tempVect.toArray() as Uint32Array\n          tempVect.delete()\n          return tempArr\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Performs the same function as the 32-bit decode, but supports true\n       * 64-bit values encapsulated by a BigInt.\n       *\n       * There's no official support for sending a BigInt64Array/BigUint64Array\n       * from C++ to JS, therefore this function uses string conversion to\n       * marshal data which is noticably slower. Use this function if you\n       * absolutely need to marshal values larger than 32 bits.\n       *\n       * @see {@link BatchEncoder#decode} for more information about decode.\n       * @function\n       * @name BatchEncoder#decodeBigInt\n       * @param {PlainText} plainText Data to decode\n       * @param {boolean} [signed=true] By default, decode as an BigInt64Array. If false, decode as an BigUint64Array\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * @returns {BigInt64Array|BigUint64Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(BigInt64Array.from([1n, -2n, 3n]))\n       * const plainTextU = batchEncoder.encode(BigUint64Array.from([1n, 2n, 3n]))\n       *\n       * const result = batchEncoder.decodeBigInt(plainText)\n       * const resultU = batchEncoder.decodeBigInt(plainTextU, false) // To decode as an BigUint64Array\n       */\n      decodeBigInt(\n        plainText: PlainText,\n        signed = true,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): BigInt64Array | BigUint64Array {\n        try {\n          if (signed) {\n            const instance = _instance.decodeBigInt(\n              plainText.instance,\n              true,\n              pool\n            )\n            return BigInt64Array.from(instance)\n          }\n          const instance = _instance.decodeBigInt(\n            plainText.instance,\n            false,\n            pool\n          )\n          return BigUint64Array.from(instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The total number of batching slots available to hold data\n       *\n       * @readonly\n       * @name BatchEncoder#slotCount\n       * @type {number}\n       */\n      get slotCount() {\n        return _instance.slotCount()\n      }\n    }\n  }\n\nexport const BatchEncoderInit = ({\n  loader\n}: LoaderOptions): BatchEncoderDependencies => {\n  const library: Library = loader.library\n  return BatchEncoderConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { INVALID_CIPHER_CONSTRUCTOR_OPTIONS } from './constants'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\nexport type CipherTextDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CipherTextDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: CipherTextDependencyOptions): CipherTextConstructorOptions\n}\n\nexport type CipherTextConstructorOptions = {\n  ({\n    context,\n    parmsId,\n    sizeCapacity,\n    pool\n  }?: {\n    context?: Context\n    parmsId?: ParmsIdType\n    sizeCapacity?: number\n    pool?: MemoryPoolHandle\n  }): CipherText\n}\n\nexport type CipherText = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (context: Context, capacity: number) => void\n  readonly resize: (size: number) => void\n  readonly release: () => void\n  readonly coeffModulusSize: number\n  readonly polyModulusDegree: number\n  readonly size: number\n  readonly sizeCapacity: number\n  readonly isTransparent: boolean\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (cipher: CipherText) => void\n  readonly clone: () => CipherText\n  readonly move: (cipher: CipherText) => void\n}\n\nconst CipherTextConstructor =\n  (library: Library): CipherTextDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: CipherTextDependencyOptions): CipherTextConstructorOptions =>\n  ({\n    context,\n    parmsId,\n    sizeCapacity,\n    pool = MemoryPoolHandle.global\n  } = {}): CipherText => {\n    // Static methods\n    const Constructor = library.Ciphertext\n\n    let _instance = construct({\n      context,\n      parmsId,\n      sizeCapacity,\n      pool\n    })\n\n    function construct({\n      context,\n      parmsId,\n      sizeCapacity,\n      pool = MemoryPoolHandle.global\n    }: {\n      context?: Context\n      parmsId?: ParmsIdType\n      sizeCapacity?: number\n      pool?: MemoryPoolHandle\n    }) {\n      try {\n        if (!context && !parmsId && sizeCapacity === undefined) {\n          return new Constructor(pool)\n        } else if (context && !parmsId && sizeCapacity === undefined) {\n          return new Constructor(context.instance, pool)\n        } else if (context && parmsId && sizeCapacity === undefined) {\n          return new Constructor(context.instance, parmsId.instance, pool)\n        } else if (context && parmsId && sizeCapacity !== undefined) {\n          return new Constructor(\n            context.instance,\n            parmsId.instance,\n            sizeCapacity,\n            pool\n          )\n        } else {\n          throw new Error(INVALID_CIPHER_CONSTRUCTOR_OPTIONS)\n        }\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements CipherText\n     */\n\n    /**\n     * @interface CipherText\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name CipherText#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name CipherText#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name CipherText#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of a ciphertext\n       * with given capacity. In addition to the capacity, the allocation size is\n       * determined by the current encryption parameters.\n       *\n       * @function\n       * @name CipherText#reserve\n       * @param {Context} context The SEAL Context\n       * @param {number} capacity The capacity to reserve\n       */\n      reserve(context: Context, capacity: number) {\n        try {\n          return _instance.reserve(context.instance, capacity)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resizes the CipherText to given size, reallocating if the capacity\n       * of the CipherText is too small.\n       *\n       * This function is mainly intended for internal use and is called\n       * automatically by functions such as Evaluator.multiply and\n       * Evaluator.relinearize. A normal user should never have a reason\n       * to manually resize a CipherText.\n       *\n       * @function\n       * @name CipherText#resize\n       * @param {number} size The new size\n       */\n      resize(size: number) {\n        try {\n          return _instance.resize(size)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resets the CipherText. This function releases any memory allocated\n       * by the CipherText, returning it to the memory pool. It also sets all\n       * encryption parameter specific size information to zero.\n       *\n       * @function\n       * @name CipherText#release\n       */\n      release() {\n        _instance.release()\n      },\n\n      /**\n       * The number of primes in the coefficient modulus of the\n       * associated encryption parameters. This directly affects the\n       * allocation size of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#coeffModulusSize\n       * @type {number}\n       */\n      get coeffModulusSize() {\n        return _instance.coeffModulusSize()\n      },\n\n      /**\n       * The degree of the polynomial modulus of the associated\n       * encryption parameters. This directly affects the allocation size\n       * of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#polyModulusDegree\n       * @type {number}\n       */\n      get polyModulusDegree() {\n        return _instance.polyModulusDegree()\n      },\n\n      /**\n       * The size of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * The capacity of the allocation. This means the largest size\n       * of the CipherText that can be stored in the current allocation with\n       * the current encryption parameters.\n       *\n       * @readonly\n       * @name CipherText#sizeCapacity\n       * @type {number}\n       */\n      get sizeCapacity() {\n        return _instance.sizeCapacity()\n      },\n\n      /**\n       * Whether the current CipherText is transparent, i.e. does not require\n       * a secret key to decrypt. In typical security models such transparent\n       * CipherTexts would not be considered to be valid. Starting from the second\n       * polynomial in the current CipherText, this function returns true if all\n       * following coefficients are identically zero. Otherwise, returns false.\n       *\n       * @readonly\n       * @name CipherText#isTransparent\n       * @type {boolean}\n       */\n      get isTransparent() {\n        return _instance.isTransparent()\n      },\n\n      /**\n       * Whether the CipherText is in NTT form.\n       *\n       * @readonly\n       * @name CipherText#isNttForm\n       * @type {boolean}\n       */\n      get isNttForm() {\n        return _instance.isNttForm()\n      },\n\n      /**\n       * The reference to parmsId.\n       * @see {@link EncryptionParameters} for more information about parmsId.\n       *\n       * @readonly\n       * @name CipherText#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * The reference to the scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @readonly\n       * @name CipherText#scale\n       * @type {number}\n       */\n      get scale() {\n        return _instance.scale()\n      },\n\n      /**\n       * Sets the CipherText scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @function\n       * @name CipherText#setScale\n       * @param {number} scale The scale to set\n       */\n      setScale(scale: number) {\n        _instance.setScale(scale)\n      },\n\n      /**\n       * The currently used MemoryPoolHandle.\n       *\n       * @readonly\n       * @name CipherText#pool\n       * @type {MemoryPoolHandle}\n       */\n      get pool() {\n        return _instance.pool()\n      },\n\n      /**\n       * Save the CipherText to a base64 string\n       *\n       * @function\n       * @name CipherText#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the CipherText as a binary Uint8Array\n       *\n       * @function\n       * @name CipherText#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the CipherText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a CipherText from a base64 string\n       *\n       * @function\n       * @name CipherText#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a CipherText from an Uint8Array holding binary data\n       *\n       * @function\n       * @name CipherText#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing CipherText and overwrite this instance\n       *\n       * @function\n       * @name CipherText#copy\n       * @param {CipherText} cipher CipherText to copy\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = seal.CipherText()\n       * cipherTextB.copy(cipherTextA)\n       * // cipherTextB holds a copy of cipherTextA\n       */\n      copy(cipher: CipherText) {\n        try {\n          _instance.copy(cipher.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this CipherText\n       *\n       * @function\n       * @name CipherText#clone\n       * @returns {CipherText}\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = cipherTextA.clone()\n       * // cipherTextB holds a copy of cipherTextA\n       */\n      clone(): CipherText {\n        try {\n          const clonedInstance = _instance.clone()\n          const cipher = CipherTextConstructor(library)({\n            Exception,\n            ComprModeType,\n            ParmsIdType,\n            MemoryPoolHandle,\n            Vector\n          })()\n          cipher.unsafeInject(clonedInstance)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a CipherText into this one and delete the old reference\n       *\n       * @function\n       * @name CipherText#move\n       * @param {CipherText} cipher CipherText to move\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = seal.CipherText()\n       * cipherTextB.move(cipherTextA)\n       * // cipherTextB holds a the instance of cipherTextA.\n       * // cipherTextA no longer holds an instance\n       */\n      move(cipher: CipherText) {\n        try {\n          _instance.move(cipher.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          cipher.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const CipherTextInit = ({\n  loader\n}: LoaderOptions): CipherTextDependencies => {\n  const library: Library = loader.library\n  return CipherTextConstructor(library)\n}\n","import { UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE } from './constants'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type CKKSEncoderDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CKKSEncoderDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions\n}\n\nexport type CKKSEncoderConstructorOptions = {\n  (context: Context): CKKSEncoder\n}\n\nexport type CKKSEncoderTypes = Float64Array\n\nexport type CKKSEncoder = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: CKKSEncoderTypes,\n    scale: number,\n    plainText?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => CKKSEncoderTypes\n  readonly slotCount: number\n}\n\nconst CKKSEncoderConstructor =\n  (library: Library): CKKSEncoderDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions =>\n  (context): CKKSEncoder => {\n    const Constructor = library.CKKSEncoder\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements CKKSEncoder\n     */\n\n    /**\n     * @interface CKKSEncoder\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name CKKSEncoder#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name CKKSEncoder#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name CKKSEncoder#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Encodes a vector of double-precision floating-point real numbers\n       * into a plaintext polynomial. Append zeros if vector size is less than N/2.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name CKKSEncoder#encode\n       * @param {Float64Array} array Data to encode\n       * @param {number} scale Scaling parameter defining encoding precision\n       * @param {PlainText} [plainText] Destination to store the encoded result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const ckksEncoder = seal.CKKSEncoder(context)\n       *\n       * const plainText = ckksEncoder.encode(Float64Array.from([1.11, -2.222, 3.333]), Math.pow(2, 20))\n       */\n      encode(\n        array: Float64Array,\n        scale: number,\n        plainText?: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): PlainText | void {\n        try {\n          if (array.constructor === Float64Array) {\n            if (plainText) {\n              _instance.encode(array, scale, plainText.instance, pool)\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, scale, plain.instance, pool)\n            return plain\n          } else {\n            throw new Error(UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE)\n          }\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Decodes a plaintext polynomial into double-precision floating-point\n       * real numbers. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name CKKSEncoder#decode\n       * @param {PlainText} plainText Data to decode\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Float64Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const ckksEncoder = seal.CKKSEncoder(context)\n       *\n       * const plainText = ckksEncoder.encode(Float64Array.from([1, 2, 3]))\n       *\n       * const result = ckksEncoder.decode(plainText)\n       */\n      decode(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Float64Array {\n        try {\n          const tempVect = Vector()\n          const instance = _instance.decodeDouble(plainText.instance, pool)\n          tempVect.unsafeInject(instance)\n          tempVect.setType('Float64Array')\n          const tempArr = tempVect.toArray() as Float64Array\n          tempVect.delete()\n          return tempArr\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The total number of CKKS slots available to hold data\n       *\n       * @readonly\n       * @name CKKSEncoder#slotCount\n       * @type {number}\n       */\n      get slotCount() {\n        return _instance.slotCount()\n      }\n    }\n  }\n\nexport const CKKSEncoderInit = ({\n  loader\n}: LoaderOptions): CKKSEncoderDependencies => {\n  const library: Library = loader.library\n  return CKKSEncoderConstructor(library)\n}\n","import { UNSUPPORTED_BITSIZES_TYPE } from './constants'\nimport { Exception, SealError } from './exception'\nimport { Library, LoaderOptions } from './seal'\nimport { SecurityLevel } from './security-level'\nimport { Vector, VectorConstructorOptions } from './vector'\n\nexport type CoeffModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly SecurityLevel: SecurityLevel\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CoeffModulusDependencies = {\n  ({\n    Exception,\n    SecurityLevel,\n    Vector\n  }: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions\n}\n\nexport type CoeffModulusConstructorOptions = {\n  (): CoeffModulus\n}\n\nexport type CoeffModulus = {\n  readonly MaxBitCount: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => number\n  readonly BFVDefault: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => Vector\n  readonly Create: (polyModulusDegree: number, bitSizes: Int32Array) => Vector\n}\n\nconst CoeffModulusConstructor =\n  (library: Library): CoeffModulusDependencies =>\n  ({\n    Exception,\n    SecurityLevel,\n    Vector\n  }: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions =>\n  (): CoeffModulus => {\n    // Static methods\n    const _MaxBitCount = library.CoeffModulus.MaxBitCount\n    const _BFVDefault = library.CoeffModulus.BFVDefault\n    const _CreateFromArray = library.CoeffModulus.CreateFromArray\n\n    /**\n     * @implements CoeffModulus\n     */\n\n    /**\n     * @interface CoeffModulus\n     */\n    return {\n      /**\n       * Returns the Maximum Bit Count for the specified polyModulusDegree and securityLevel\n       *\n       * @function\n       * @name CoeffModulus.MaxBitCount\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n       * @returns {number} Maximum bit count\n       */\n      MaxBitCount(\n        polyModulusDegree: number,\n        securityLevel: SecurityLevel = SecurityLevel.tc128\n      ): number {\n        return _MaxBitCount(polyModulusDegree, securityLevel)\n      },\n\n      /**\n       * Returns a default vector of primes for the BFV CoeffModulus parameter\n       *\n       * @function\n       * @name CoeffModulus.BFVDefault\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n       * @returns {Vector} Vector containing Modulus primes\n       */\n      BFVDefault(\n        polyModulusDegree: number,\n        securityLevel: SecurityLevel = SecurityLevel.tc128\n      ): Vector {\n        try {\n          const vectorModulus = Vector()\n          const instance = _BFVDefault(polyModulusDegree, securityLevel)\n          vectorModulus.unsafeInject(instance)\n          vectorModulus.setType('Modulus')\n          return vectorModulus\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Creates a vector of primes for a given polyModulusDegree and bitSizes\n       *\n       * @function\n       * @name CoeffModulus.Create\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {Int32Array} bitSizes Int32Array containing values representing\n       * bit-sizes of primes\n       * @returns {Vector} Vector containing Modulus primes\n       */\n      Create(polyModulusDegree: number, bitSizes: Int32Array): Vector {\n        try {\n          if (bitSizes.constructor !== Int32Array) {\n            throw new Error(UNSUPPORTED_BITSIZES_TYPE)\n          }\n          const vectorModulus = Vector()\n          const instance = _CreateFromArray(polyModulusDegree, bitSizes)\n          vectorModulus.unsafeInject(instance)\n          vectorModulus.setType('Modulus')\n          return vectorModulus\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const CoeffModulusInit = ({\n  loader\n}: LoaderOptions): CoeffModulusDependencies => {\n  const library: Library = loader.library\n  return CoeffModulusConstructor(library)\n}\n","import { Library, LoaderOptions } from './seal'\n\nexport type ComprModeTypeDependencies = {\n  (): ComprModeTypeConstructorOptions\n}\n\nexport type ComprModeTypeConstructorOptions = {\n  (): ComprModeType\n}\n\nexport type ComprModeType = {\n  readonly none: any\n  readonly zlib: any\n  readonly zstd: any\n}\n\nconst ComprModeTypeConstructor =\n  (library: Library): ComprModeTypeDependencies =>\n  (): ComprModeTypeConstructorOptions =>\n  (): ComprModeType => {\n    // Static methods\n    const _none = library.ComprModeType.none\n    const _zlib = library.ComprModeType.zlib\n    const _zstd = library.ComprModeType.zstd\n\n    /**\n     * @implements ComprModeType\n     */\n\n    /**\n     * @interface ComprModeType\n     */\n    return {\n      /**\n       * The `none` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.none\n       * @type {ComprModeType.none}\n       */\n      get none() {\n        /**\n         * @typedef {ComprModeType.none} ComprModeType.none\n         */\n        return _none\n      },\n\n      /**\n       * The `zlib` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.zlib\n       * @type {ComprModeType.zlib}\n       */\n      get zlib() {\n        /**\n         * @typedef {ComprModeType.zlib} ComprModeType.zlib\n         */\n        return _zlib\n      },\n\n      /**\n       * The `zstd` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.zstd\n       * @type {ComprModeType.zstd}\n       */\n      get zstd() {\n        /**\n         * @typedef {ComprModeType.zstd} ComprModeType.zstd\n         */\n        return _zstd\n      }\n    }\n  }\n\nexport const ComprModeTypeInit = ({\n  loader\n}: LoaderOptions): ComprModeTypeDependencies => {\n  const library: Library = loader.library\n  return ComprModeTypeConstructor(library)\n}\n","import { ContextData, ContextDataConstructorOptions } from './context-data'\nimport { EncryptionParameters } from './encryption-parameters'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { SecurityLevel } from './security-level'\n\nexport type ContextDependencyOptions = {\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly ContextData: ContextDataConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n}\n\nexport type ContextDependencies = {\n  ({\n    ParmsIdType,\n    ContextData,\n    SecurityLevel\n  }: ContextDependencyOptions): ContextConstructorOptions\n}\n\nexport type ContextConstructorOptions = {\n  (\n    encryptionParams: EncryptionParameters,\n    expandModChain?: boolean,\n    securityLevel?: SecurityLevel\n  ): Context\n}\n\nexport type Context = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly toHuman: () => string\n  readonly getContextData: (parmsId: ParmsIdType) => ContextData\n  readonly keyContextData: ContextData\n  readonly firstContextData: ContextData\n  readonly lastContextData: ContextData\n  readonly parametersSet: () => boolean\n  readonly keyParmsId: ParmsIdType\n  readonly firstParmsId: ParmsIdType\n  readonly lastParmsId: ParmsIdType\n  readonly usingKeyswitching: boolean\n}\n\nconst ContextConstructor =\n  (library: Library): ContextDependencies =>\n  ({\n    ParmsIdType,\n    ContextData,\n    SecurityLevel\n  }: ContextDependencyOptions): ContextConstructorOptions =>\n  (\n    encryptionParams,\n    expandModChain = true,\n    securityLevel = SecurityLevel.tc128\n  ): Context => {\n    // Static methods\n    const Constructor = library.SEALContext\n\n    let _instance = new Constructor(\n      encryptionParams.instance,\n      expandModChain,\n      securityLevel\n    ) as Instance\n\n    /**\n     * @implements Context\n     */\n\n    /**\n     * @interface Context\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Context#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Context#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Context#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns the context parameters in a human readable string format.\n       *\n       * @private\n       * @function\n       * @name Context#toString\n       * @returns {string} Context details as a string\n       */\n      toHuman(): string {\n        return _instance.toHuman()\n      },\n\n      /**\n       * Returns the ContextData corresponding to encryption parameters with a given\n       * parmsId. If parameters with the given parmsId are not found then the\n       * function returns nullptr.\n       *\n       * @function\n       * @name Context#getContextData\n       * @param {ParmsIdType} parmsId Specific id to return ContextData for\n       * @returns {ContextData} ContextData corresponding to encryption parameters\n       */\n      getContextData(parmsId: ParmsIdType): ContextData {\n        const instance = _instance.getContextData(parmsId.instance)\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * The ContextData corresponding to encryption parameters that are used for keys.\n       *\n       * @readonly\n       * @name Context#keyContextData\n       * @type {ContextData}\n       */\n      get keyContextData() {\n        const instance = _instance.keyContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * The ContextData corresponding to the first encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#firstContextData\n       * @type {ContextData}\n       */\n      get firstContextData() {\n        const instance = _instance.firstContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * Returns the ContextData corresponding to the last encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#lastContextData\n       * @type {ContextData}\n       */\n      get lastContextData() {\n        const instance = _instance.lastContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * Whether the encryption parameters are set in a way that is considered valid by\n       * Microsoft SEAL, the variable parameters_set is set to true.\n       *\n       * @function\n       * @name Context#parametersSet\n       * @type {boolean}\n       */\n      parametersSet() {\n        return _instance.parametersSet()\n      },\n\n      /**\n       * Returns a ParmsIdType corresponding to the set of encryption parameters that are used for keys.\n       *\n       * @readonly\n       * @name Context#keyParmsId\n       * @type {ParmsIdType}\n       */\n      get keyParmsId() {\n        const instance = _instance.keyParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * Returns a ParmsIdType corresponding to the first encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#firstParmsId\n       * @type {ParmsIdType}\n       */\n      get firstParmsId() {\n        const instance = _instance.firstParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * The ParmsIdType corresponding to the last encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#lastParmsId\n       * @type {ParmsIdType}\n       */\n      get lastParmsId() {\n        const instance = _instance.lastParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * Whether the coefficient modulus supports keyswitching. In practice,\n       * support for keyswitching is required by Evaluator.relinearize,\n       * Evaluator.applyGalois, and all rotation and conjugation operations. For\n       * keyswitching to be available, the coefficient modulus parameter must consist\n       * of at least two prime number factors.\n       *\n       * @readonly\n       * @name Context#usingKeyswitching\n       * @type {boolean}\n       */\n      get usingKeyswitching() {\n        return _instance.usingKeyswitching()\n      }\n    }\n  }\n\nexport const ContextInit = ({ loader }: LoaderOptions): ContextDependencies => {\n  const library: Library = loader.library\n  return ContextConstructor(library)\n}\n","import {\n  EncryptionParameterQualifiers,\n  EncryptionParameterQualifiersConstructorOptions\n} from './encryption-parameter-qualifiers'\nimport {\n  EncryptionParameters,\n  EncryptionParametersConstructorOptions\n} from './encryption-parameters'\nimport { Exception } from './exception'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { Instance, Library, LoaderOptions } from './seal'\n\nexport type ContextDataDependencyOptions = {\n  readonly Exception: Exception\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n}\n\nexport type ContextDataDependencies = {\n  ({\n    Exception,\n    EncryptionParameters,\n    ParmsIdType,\n    EncryptionParameterQualifiers\n  }: ContextDataDependencyOptions): ContextDataConstructorOptions\n}\n\nexport type ContextDataConstructorOptions = {\n  (): ContextData\n}\n\nexport type ContextData = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parms: EncryptionParameters\n  readonly parmsId: ParmsIdType\n  readonly qualifiers: EncryptionParameterQualifiers\n  readonly totalCoeffModulusBitCount: number\n  readonly prevContextData: ContextData\n  readonly nextContextData: ContextData\n  readonly chainIndex: number\n}\n\nconst ContextDataConstructor =\n  (library: Library): ContextDataDependencies =>\n  ({\n    Exception,\n    EncryptionParameters,\n    ParmsIdType,\n    EncryptionParameterQualifiers\n  }: ContextDataDependencyOptions): ContextDataConstructorOptions =>\n  (): ContextData => {\n    let _instance: Instance\n    /**\n     * @implements ContextData\n     */\n\n    /**\n     * @interface ContextData\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name ContextData#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name ContextData#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name ContextData#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns a const reference to the underlying encryption parameters.\n       *\n       * @readonly\n       * @name ContextData#parms\n       * @type {EncryptionParameters}\n       */\n      get parms() {\n        const instance = _instance.parms()\n        const encryptionParameters = EncryptionParameters()\n        encryptionParameters.unsafeInject(instance)\n        return encryptionParameters\n      },\n\n      /**\n       * Returns the parmsId of the current parameters.\n       *\n       * @readonly\n       * @name ContextData#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * Returns a copy of EncryptionParameterQualifiers corresponding to the\n       * current encryption parameters. Note that to change the qualifiers it is\n       * necessary to create a new instance of SEALContext once appropriate changes\n       * to the encryption parameters have been made.\n       *\n       * @readonly\n       * @name ContextData#qualifiers\n       * @type {EncryptionParameterQualifiers}\n       */\n      get qualifiers() {\n        const encParmQualifiers = EncryptionParameterQualifiers()\n        encParmQualifiers.unsafeInject(_instance.qualifiers())\n        return encParmQualifiers\n      },\n\n      /**\n       * Returns the significant bit count of the total coefficient modulus.\n       *\n       * @readonly\n       * @name ContextData#totalCoeffModulusBitCount\n       * @type {number}\n       */\n      get totalCoeffModulusBitCount() {\n        return _instance.totalCoeffModulusBitCount()\n      },\n\n      /**\n       * Returns a shared_ptr to the context data corresponding to the previous parameters\n       * in the modulus switching chain. If the current data is the first one in the\n       * chain, then the result is nullptr.\n       *\n       * @readonly\n       * @name ContextData#prevContextData\n       * @type {ContextData}\n       */\n      get prevContextData() {\n        const cxtData = ContextDataConstructor(library)({\n          Exception,\n          EncryptionParameters,\n          ParmsIdType,\n          EncryptionParameterQualifiers\n        })()\n        cxtData.unsafeInject(_instance.prevContextData())\n        return cxtData\n      },\n\n      /**\n       * Returns a shared_ptr to the context data corresponding to the next parameters\n       * in the modulus switching chain. If the current data is the last one in the\n       * chain, then the result is nullptr.\n       *\n       * @readonly\n       * @name ContextData#nextContextData\n       * @type {ContextData}\n       */\n      get nextContextData() {\n        const cxtData = ContextDataConstructor(library)({\n          Exception,\n          EncryptionParameters,\n          ParmsIdType,\n          EncryptionParameterQualifiers\n        })()\n        cxtData.unsafeInject(_instance.nextContextData())\n        return cxtData\n      },\n\n      /**\n       * Returns the index of the parameter set in a chain. The initial parameters\n       * have index 0 and the index increases sequentially in the parameter chain.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#chainIndex\n       * @type {number}\n       */\n      get chainIndex() {\n        return _instance.chainIndex()\n      }\n    }\n  }\n\nexport const ContextDataInit = ({\n  loader\n}: LoaderOptions): ContextDataDependencies => {\n  const library: Library = loader.library\n  return ContextDataConstructor(library)\n}\n","import { CipherText } from './cipher-text'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { SecretKey } from './secret-key'\n\nexport type DecryptorDependencyOptions = {\n  readonly Exception: Exception\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport type DecryptorDependencies = {\n  ({\n    Exception,\n    PlainText\n  }: DecryptorDependencyOptions): DecryptorConstructorOptions\n}\n\nexport type DecryptorConstructorOptions = {\n  (context: Context, secretKey: SecretKey): Decryptor\n}\n\nexport type Decryptor = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly decrypt: (\n    cipherText: CipherText,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly invariantNoiseBudget: (cipherText: CipherText) => number\n}\n\nconst DecryptorConstructor =\n  (library: Library): DecryptorDependencies =>\n  ({\n    Exception,\n    PlainText\n  }: DecryptorDependencyOptions): DecryptorConstructorOptions =>\n  (context, secretKey): Decryptor => {\n    const Constructor = library.Decryptor\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance, secretKey.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements Decryptor\n     */\n\n    /**\n     * @interface Decryptor\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Decryptor#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Decryptor#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Decryptor#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Decrypts a CipherText and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Decryptor#decrypt\n       * @param {CipherText} cipherText CipherText to decrypt\n       * @param {PlainText} [plainText] PlainText destination to store the decrypted result\n       * @returns {PlainText|void} Returns undefined if a PlainText was specified. Otherwise returns a\n       * PlainText containng the decrypted result\n       */\n      decrypt(cipherText: CipherText, plainText?: PlainText): PlainText | void {\n        try {\n          if (plainText) {\n            _instance.decrypt(cipherText.instance, plainText.instance)\n            return\n          }\n          const plain = PlainText()\n          _instance.decrypt(cipherText.instance, plain.instance)\n          return plain\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Computes the invariant noise budget (in bits) of a CipherText. The invariant\n       * noise budget measures the amount of room there is for the noise to grow while\n       * ensuring correct decryptions. This function works only with the BFV scheme.\n       *\n       * @par Invariant Noise Budget\n       * The invariant noise polynomial of a CipherText is a rational coefficient\n       * polynomial, such that a CipherText decrypts correctly as long as the\n       * coefficients of the invariantnoise polynomial are of absolute value less\n       * than 1/2. Thus, we call the infinity-norm of the invariant noise polynomial\n       * the invariant noise, and for correct decryption requireit to be less than\n       * 1/2. If v denotes the invariant noise, we define the invariant noise budget\n       * as -log2(2v). Thus, the invariant noise budget starts from some initial\n       * value, which depends on the encryption parameters, and decreases when\n       * computations are performed. When the budget reaches zero, the CipherText\n       * becomes too noisy to decrypt correctly.\n       *\n       * @function\n       * @name Decryptor#invariantNoiseBudget\n       * @param {CipherText} cipherText CipherText to measure\n       * @returns {number} Invariant noise budget (in bits)\n       */\n      invariantNoiseBudget(cipherText: CipherText): number {\n        try {\n          return _instance.invariantNoiseBudget(cipherText.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const DecryptorInit = ({\n  loader\n}: LoaderOptions): DecryptorDependencies => {\n  const library: Library = loader.library\n  return DecryptorConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Exception, SealError } from './exception'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { SchemeType } from './scheme-type'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { Vector, VectorConstructorOptions } from './vector'\n\nexport type EncryptionParametersDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Modulus: ModulusConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type EncryptionParametersDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Modulus,\n    SchemeType,\n    Vector\n  }: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions\n}\n\nexport type EncryptionParametersConstructorOptions = {\n  (schemeType?: SchemeType): EncryptionParameters\n}\n\nexport type EncryptionParameters = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setPolyModulusDegree: (polyModulusDegree: number) => void\n  readonly setCoeffModulus: (coeffModulus: Vector) => void\n  readonly setPlainModulus: (plainModulus: Modulus) => void\n  readonly scheme: SchemeType\n  readonly polyModulusDegree: number\n  readonly coeffModulus: BigUint64Array\n  readonly plainModulus: Modulus\n  readonly parmsId: ParmsIdType\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst EncryptionParametersConstructor =\n  (library: Library): EncryptionParametersDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Modulus,\n    SchemeType,\n    ParmsIdType,\n    Vector\n  }: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions =>\n  (schemeType: SchemeType = SchemeType.none): EncryptionParameters => {\n    const Constructor = library.EncryptionParameters\n    let _instance = new Constructor(schemeType)\n\n    /**\n     * @implements EncryptionParameters\n     */\n\n    /**\n     * @interface EncryptionParameters\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name EncryptionParameters#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name EncryptionParameters#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name EncryptionParameters#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Sets the degree of the polynomial modulus parameter to the specified value.\n       * The polynomial modulus directly affects the number of coefficients in\n       * PlainText polynomials, the size of CipherText elements, the computational\n       * performance of the scheme (bigger is worse), and the security level (bigger\n       * is better). In Microsoft SEAL the degree of the polynomial modulus must be a power\n       * of 2 (e.g.  1024, 2048, 4096, 8192, 16384, or 32768).\n       *\n       * @function\n       * @name EncryptionParameters#setPolyModulusDegree\n       * @param {number} polyModulusDegree The degree of the polynomial modulus\n       */\n      setPolyModulusDegree(polyModulusDegree: number) {\n        try {\n          _instance.setPolyModulusDegree(polyModulusDegree)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the coefficient modulus parameter. The coefficient modulus consists\n       * of a list of distinct prime numbers, and is represented by a vector of\n       * Modulus objects. The coefficient modulus directly affects the size\n       * of CipherText elements, the amount of computation that the scheme can perform\n       * (bigger is better), and the security level (bigger is worse). In Microsoft SEAL each\n       * of the prime numbers in the coefficient modulus must be at most 60 bits,\n       * and must be congruent to 1 modulo 2*degree(poly_modulus).\n       *\n       * @function\n       * @name EncryptionParameters#setCoeffModulus\n       * @param {Vector} coeffModulus Vector of Modulus primes\n       */\n      setCoeffModulus(coeffModulus: Vector) {\n        try {\n          _instance.setCoeffModulus(coeffModulus.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the PlainText modulus parameter. The PlainText modulus is an integer\n       * modulus represented by the Modulus class. The PlainText modulus\n       * determines the largest coefficient that PlainText polynomials can represent.\n       * It also affects the amount of computation that the scheme can perform\n       * (bigger is worse). In Microsoft SEAL the PlainText modulus can be at most 60 bits\n       * long, but can otherwise be any integer. Note, however, that some features\n       * (e.g. batching) require the PlainText modulus to be of a particular form.\n       *\n       * @function\n       * @name EncryptionParameters#setPlainModulus\n       * @param {Modulus} plainModulus PlainText modulus parameter\n       */\n      setPlainModulus(plainModulus: Modulus) {\n        try {\n          _instance.setPlainModulus(plainModulus.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The encryption scheme type.\n       *\n       * @readonly\n       * @name EncryptionParameters#scheme\n       * @type {SchemeType.none|SchemeType.bfv|SchemeType.ckks}\n       */\n      get scheme() {\n        return _instance.scheme()\n      },\n\n      /**\n       * The degree of the polynomial modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#polyModulusDegree\n       * @type {number}\n       */\n      get polyModulusDegree() {\n        return _instance.polyModulusDegree()\n      },\n\n      /**\n       * Returns the currently set coefficient modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#coeffModulus\n       * @type {BigUint64Array}\n       */\n      get coeffModulus() {\n        const tempVect = Vector()\n        const instance = _instance.coeffModulus()\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Modulus')\n        const tempArr = tempVect.toArray() as BigUint64Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Returns the currently set PlainText modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#plainModulus\n       * @type {Modulus}\n       */\n      get plainModulus() {\n        const instance = _instance.plainModulus()\n        const smallModulus = Modulus(BigInt(0))\n        smallModulus.inject(instance)\n        return smallModulus\n      },\n\n      /**\n       * Returns the ParmsId of the current parameters.\n       *\n       * @readonly\n       * @name EncryptionParameters#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name EncryptionParameters#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the Encryption Parameters as a binary Uint8Array\n       *\n       * @function\n       * @name EncryptionParameters#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the CipherText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load the Encryption Parameters from a base64 string\n       *\n       * @function\n       * @name EncryptionParameters#load\n       * @param {string} encoded base64 encoded string\n       */\n      load(encoded: string) {\n        try {\n          _instance.loadFromString(encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load the Encryption Parameters from an Uint8Array holding binary data\n       *\n       * @function\n       * @name EncryptionParameters#loadArray\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(array: Uint8Array) {\n        try {\n          _instance.loadFromArray(array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const EncryptionParametersInit = ({\n  loader\n}: LoaderOptions): EncryptionParametersDependencies => {\n  const library: Library = loader.library\n  return EncryptionParametersConstructor(library)\n}\n","import { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText } from './plain-text'\nimport { PublicKey } from './public-key'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { SecretKey } from './secret-key'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\n\nexport type EncryptorDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport type EncryptorDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    Serializable\n  }: EncryptorDependencyOptions): EncryptorConstructorOptions\n}\n\nexport type EncryptorConstructorOptions = {\n  (context: Context, publicKey: PublicKey, secretKey?: SecretKey): Encryptor\n}\n\nexport type Encryptor = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encrypt: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSerializable: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => Serializable\n  readonly encryptSymmetric: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSymmetricSerializable: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => Serializable\n  readonly encryptZero: (\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptZeroSerializable: (pool?: MemoryPoolHandle) => Serializable\n}\n\nconst EncryptorConstructor =\n  (library: Library): EncryptorDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    Serializable\n  }: EncryptorDependencyOptions): EncryptorConstructorOptions =>\n  (context, publicKey, secretKey): Encryptor => {\n    const Constructor = library.Encryptor\n    let _instance = constructInstance(context, publicKey, secretKey)\n\n    function constructInstance(\n      context: Context,\n      publicKey: PublicKey,\n      secretKey?: SecretKey\n    ) {\n      try {\n        if (secretKey) {\n          return new Constructor(\n            context.instance,\n            publicKey.instance,\n            secretKey.instance\n          )\n        }\n        return new Constructor(context.instance, publicKey.instance)\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements Encryptor\n     */\n\n    /**\n     * @interface Encryptor\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Encryptor#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Encryptor#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Encryptor#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Encrypts a PlainText and stores the result in the destination parameter.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encrypt\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {CipherText} [cipherText] CipherText destination to store the encrypted result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encrypt(\n        plainText: PlainText,\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encrypt(plainText.instance, cipherText.instance, pool)\n            return\n          }\n          const cipher = CipherText()\n          _instance.encrypt(plainText.instance, cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a PlainText and returns a CipherText as a Serializable object.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptSerializable\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} A Serializable containing the encrypted result\n       */\n      encryptSerializable(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const temp = Serializable()\n          const instance = _instance.encryptSerializable(\n            plainText.instance,\n            pool\n          )\n          temp.unsafeInject(instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a PlainText with the secret key and stores the result in\n       * destination.\n       *\n       * The encryption parameters for the resulting CipherText\n       * correspond to:\n       * 1) in BFV or BGV, the highest (data) level in the modulus switching chain,\n       * 2) in CKKS, the encryption parameters of the plaintext.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptSymmetric\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {CipherText} [cipherText] CipherText destination to store the encrypted result.\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encryptSymmetric(\n        plainText: PlainText,\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encryptSymmetric(\n              plainText.instance,\n              cipherText.instance,\n              pool\n            )\n            return\n          }\n          const cipher = CipherText()\n          _instance.encryptSymmetric(plainText.instance, cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a plaintext with the secret key and returns the ciphertext as\n       * a serializable object.\n       *\n       * The encryption parameters for the resulting CipherText\n       * correspond to:\n       * 1) in BFV or BGV, the highest (data) level in the modulus switching chain,\n       * 2) in CKKS, the encryption parameters of the plaintext.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * Half of the ciphertext data is pseudo-randomly generated from a seed to\n       * reduce the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       * @function\n       * @name Encryptor#encryptSymmetricSerializable\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} Returns a Serializable containing the encrypted result\n       */\n      encryptSymmetricSerializable(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.encryptSymmetricSerializable(\n            plainText.instance,\n            pool\n          )\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a zero plaintext with the public key and returns the ciphertext\n       * as a serializable object.\n       *\n       * The encryption parameters for the resulting ciphertext correspond to the\n       * highest (data) level in the modulus switching chain. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptZero\n       * @param {CipherText} [cipherText] A CipherText to overwrite.\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encryptZero(\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encryptZero(cipherText.instance, pool)\n            return\n          }\n          const cipher = CipherText()\n          _instance.encryptZero(cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a zero plaintext with the public key and stores the result in\n       * destination.\n       *\n       * The encryption parameters for the resulting ciphertext correspond to the\n       * highest (data) level in the modulus switching chain. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptZeroSerializable\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} A CipherText as a serialized object containing the encrypted result\n       */\n      encryptZeroSerializable(\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.encryptZeroSerializable(pool)\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const EncryptorInit = ({\n  loader\n}: LoaderOptions): EncryptorDependencies => {\n  const library: Library = loader.library\n  return EncryptorConstructor(library)\n}\n","import { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { GaloisKeys } from './galois-keys'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType } from './parms-id-type'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { RelinKeys } from './relin-keys'\nimport { SchemeType } from './scheme-type'\nimport { Instance, Library, LoaderOptions } from './seal'\n\nexport type EvaluatorDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport type EvaluatorDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    PlainText\n  }: EvaluatorDependencyOptions): EvaluatorConstructorOptions\n}\n\nexport type EvaluatorConstructorOptions = {\n  (context: Context): Evaluator\n}\n\nexport type Evaluator = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly negate: (\n    encrypted: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly add: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly sub: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly multiply: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly square: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly relinearize: (\n    encrypted: CipherText,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainModSwitchToNext: (\n    plain: PlainText,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly plainModSwitchTo: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly rescaleToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rescaleTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly modReduceToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly modReduceTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly exponentiate: (\n    encrypted: CipherText,\n    exponent: number,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly addPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly subPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly multiplyPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainTransformToNtt: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destinationNtt?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly cipherTransformToNtt: (\n    encrypted: CipherText,\n    destinationNtt?: CipherText\n  ) => CipherText | void\n  readonly cipherTransformFromNtt: (\n    encryptedNtt: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly applyGalois: (\n    encrypted: CipherText,\n    galoisElt: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateRows: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateColumns: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateVector: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly complexConjugate: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly sumElements: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProduct: (\n    a: CipherText,\n    b: CipherText,\n    relinKeys: RelinKeys,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProductPlain: (\n    a: CipherText,\n    b: PlainText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n}\n\nconst EvaluatorConstructor =\n  (library: Library): EvaluatorDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    PlainText\n  }: EvaluatorDependencyOptions): EvaluatorConstructorOptions =>\n  (context): Evaluator => {\n    const Constructor = library.Evaluator\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements Evaluator\n     */\n\n    /**\n     * @interface Evaluator\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Evaluator#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Evaluator#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Evaluator#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Negates a CipherText and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#negate\n       * @param {CipherText} encrypted CipherText to negate\n       * @param {CipherText} [destination] CipherText to store the negated results\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherText = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.negate(cipherText)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.negate(encrypted, cipherDest)\n       */\n      negate(\n        encrypted: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.negate(encrypted.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.negate(encrypted.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Adds two CipherTexts. This function adds together a and b\n       * and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#add\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the sum\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.add(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.add(cipherTextA, cipherTextB, cipherDest)\n       */\n      add(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.add(a.instance, b.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.add(a.instance, b.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Subtracts two CipherTexts. This function computes the difference of a\n       * and b and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#sub\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the difference\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.sub(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.sub(cipherTextA, cipherTextB, cipherDest)\n       */\n      sub(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.sub(a.instance, b.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.sub(a.instance, b.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Multiplies two CipherTexts. This functions computes the product of a\n       * and b and stores the result in the destination parameter. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#multiply\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the product\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.multiply(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.multiply(cipherTextA, cipherTextB, cipherDest)\n       */\n      multiply(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiply(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.multiply(a.instance, b.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Squares a CipherText. This functions computes the square of encrypted and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#square\n       * @param {CipherText} encrypted CipherText to square\n       * @param {CipherText} [destination] CipherText destination to store the squared result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.square(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.square(cipherTextA, cipherDest)\n       */\n      square(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.square(encrypted.instance, destination.instance, pool)\n            return\n          }\n          const temp = CipherText()\n          _instance.square(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Relinearizes a CipherText. This functions relinearizes encrypted, reducing\n       * its size down to 2, and stores the result in the destination parameter.\n       * If the size of encrypted is K+1, the given relinearization keys need to\n       * have size at least K-1. Dynamic memory allocations in the process are allocated\n       * from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#relinearize\n       * @param {CipherText} encrypted CipherText to relinearize\n       * @param {RelinKeys} relinKeys RelinKey used to perform relinearization\n       * @param {CipherText} [destination] CipherText destination to store the relinearized result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.relinearize(cipherTextA, relinKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.relinearize(cipherTextA, relinKeys, cipherDest)\n       */\n      relinearize(\n        encrypted: CipherText,\n        relinKeys: RelinKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.relinearize(\n              encrypted.instance,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.relinearize(\n            encrypted.instance,\n            relinKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down to q_1...q_{k-1} and stores the result in the destination\n       * parameter. Dynamic memory allocations in the process are allocated from\n       * the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#cipherModSwitchToNext\n       * @param {CipherText} encrypted CipherText to switch its modulus down\n       * @param {CipherText} [destination] CipherText destination to store the switched result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.cipherModSwitchToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherModSwitchToNext(cipherTextA, cipherDest)\n       */\n      cipherModSwitchToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherModSwitchToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherModSwitchToNext(\n            encrypted.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down until the parameters reach the given parmsId and stores the\n       * result in the destination parameter. Dynamic memory allocations in the process\n       * are allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#cipherModSwitchTo\n       * @param {CipherText} encrypted CipherText to switch its modulus down\n       * @param {ParmsIdType} parmsId Target parmsId to switch to\n       * @param {CipherText} [destination] CipherText destination to store the switched result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.cipherModSwitchTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherModSwitchTo(cipherTextA, parmsId, cipherDest)\n       */\n      cipherModSwitchTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherModSwitchTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherModSwitchTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Modulus switches an NTT transformed PlainText from modulo q_1...q_k down\n       * to modulo q_1...q_{k-1} and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#plainModSwitchToNext\n       * @param {PlainText} plain PlainText to switch its modulus down\n       * @param {PlainText} [destination] PlainText destination to store the switched result\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const resultCipher = evaluator.plainModSwitchToNext(plainTextA)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainModSwitchToNext(plainTextA, plainDest)\n       */\n      plainModSwitchToNext(\n        plain: PlainText,\n        destination?: PlainText\n      ): PlainText | void {\n        try {\n          if (destination) {\n            _instance.plainModSwitchToNext(plain.instance, destination.instance)\n            return\n          }\n          const temp = PlainText()\n          _instance.plainModSwitchToNext(plain.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given an NTT transformed PlainText modulo q_1...q_k, this function switches\n       * the modulus down until the parameters reach the given parmsId and stores\n       * the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#plainModSwitchTo\n       * @param {PlainText} plain PlainText to switch its modulus down\n       * @param {ParmsIdType} parmsId Target parmsId to switch to\n       * @param {PlainText} [destination] PlainText destination to store the switched result\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.plainModSwitchTo(plainTextA, parmsId)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainModSwitchTo(plainTextA, parmsId, plainDest)\n       */\n      plainModSwitchTo(\n        plain: PlainText,\n        parmsId: ParmsIdType,\n        destination?: PlainText\n      ): PlainText | void {\n        try {\n          if (destination) {\n            _instance.plainModSwitchTo(\n              plain.instance,\n              parmsId.instance,\n              destination.instance\n            )\n            return\n          }\n          const temp = PlainText()\n          _instance.plainModSwitchTo(\n            plain.instance,\n            parmsId.instance,\n            temp.instance\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down to q_1...q_{k-1}, scales the message down accordingly, and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rescaleToNext\n       * @param {CipherText} encrypted CipherText to rescale\n       * @param {CipherText} [destination] CipherText destination to store the rescaled result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rescaleToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rescaleToNext(cipherTextA, cipherDest)\n       */\n      rescaleToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rescaleToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rescaleToNext(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down until the parameters reach the given parmsId, scales the message\n       * down accordingly, and stores the result in the destination parameter. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rescaleTo\n       * @param {CipherText} encrypted CipherText to rescale\n       * @param {ParmsIdType} parmsId Target parmsId to rescale to\n       * @param {CipherText} [destination] CipherText destination to store the rescaled result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.rescaleTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rescaleTo(cipherTextA, parmsId, cipherDest)\n       */\n      rescaleTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rescaleTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rescaleTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a ciphertext encrypted modulo q_1...q_k, this function switches\n       * the modulus down to q_1...q_{k-1}, scales the message down accordingly,\n       * and stores the result in the destination parameter. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#modReduceToNext\n       * @param {CipherText} encrypted CipherText to reduce\n       * @param {CipherText} [destination] CipherText destination to store the\n       * reduced result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if\n       * a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.modReduceToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.modReduceToNext(cipherTextA, cipherDest)\n       */\n      modReduceToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.modReduceToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.modReduceToNext(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a ciphertext encrypted modulo q_1...q_k, this function reduces\n       * the modulus down until the parameters reach the given parms_id and\n       * stores the result in the destination parameter. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#modReduceTo\n       * @param {CipherText} encrypted CipherText to reduce\n       * @param {ParmsIdType} parmsId Target parmsId to reduce to\n       * @param {CipherText} [destination] CipherText destination to store the\n       * reduced result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if\n       * a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.modReduceTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.modReduceTo(cipherTextA, parmsId, cipherDest)\n       */\n      modReduceTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.modReduceTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.modReduceTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Exponentiates a CipherText. This functions raises encrypted to a power and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle. The exponentiation is done in a depth-optimal order, and\n       * relinearization is performed automatically after every multiplication in\n       * the process. In relinearization the given relinearization keys are used.\n       *\n       * @function\n       * @name Evaluator#exponentiate\n       * @param {CipherText} encrypted CipherText to exponentiate\n       * @param {number} exponent Positive integer to exponentiate the CipherText\n       * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after each exponentiation\n       * @param {CipherText} [destination] CipherText destination to store the exponentiated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.exponentiate(cipherTextA, 3, relinKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.exponentiate(cipherTextA, 3, relinKeys, cipherDest)\n       */\n      exponentiate(\n        encrypted: CipherText,\n        exponent: number,\n        relinKeys: RelinKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.exponentiate(\n              encrypted.instance,\n              exponent,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.exponentiate(\n            encrypted.instance,\n            exponent,\n            relinKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Adds a CipherText and a PlainText. This function adds a CipherText and\n       * a PlainText and stores the result in the destination parameter. The PlainText\n       * must be valid for the current encryption parameters.\n       *\n       * @function\n       * @name Evaluator#addPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the sum\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.addPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.addPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      addPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.addPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.addPlain(\n            encrypted.instance,\n            plain.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Subtracts a PlainText from a CipherText. This function subtracts a PlainText\n       * from a CipherText and stores the result in the destination parameter. The\n       * PlainText must be valid for the current encryption parameters.\n       *\n       * @function\n       * @name Evaluator#subPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the difference\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.subPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.subPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      subPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.subPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.subPlain(\n            encrypted.instance,\n            plain.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Multiplies a CipherText with a PlainText. This function multiplies\n       * a CipherText with a PlainText and stores the result in the destination\n       * parameter. The PlainText must be a valid for the current encryption parameters,\n       * and cannot be identially 0. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#multiplyPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the product\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText?} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.multiplyPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.multiplyPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      multiplyPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiplyPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.multiplyPlain(\n            encrypted.instance,\n            plain.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a PlainText to NTT domain. This functions applies the number\n       * Theoretic Transform to a PlainText by first embedding integers modulo the\n       * PlainText modulus to integers modulo the coefficient modulus and then\n       * performing David Harvey's NTT on the resulting polynomial. The transformation\n       * is done with respect to encryption parameters corresponding to a given\n       * parmsId. The result is stored in the destinationNtt parameter. For the\n       * operation to be valid, the PlainText must have degree less than PolyModulusDegree\n       * and each coefficient must be less than the PlainText modulus, i.e., the PlainText\n       * must be a valid PlainText under the current encryption parameters. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#plainTransformToNtt\n       * @param {PlainText} plain PlainText to transform\n       * @param {ParmsIdType} parmsId target parmsId to perform NTT transformation\n       * @param {PlainText} [destinationNtt] PlainText destination to store the transformed result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.plainTransformToNtt(plainTextA, parmsId)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainTransformToNtt(plainTextA, parmsId, plainDest)\n       */\n      plainTransformToNtt(\n        plain: PlainText,\n        parmsId: ParmsIdType,\n        destinationNtt?: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): PlainText | void {\n        try {\n          if (destinationNtt) {\n            _instance.plainTransformToNtt(\n              plain.instance,\n              parmsId.instance,\n              destinationNtt.instance,\n              pool\n            )\n            return\n          }\n          const temp = PlainText()\n          _instance.plainTransformToNtt(\n            plain.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a CipherText to NTT domain. This functions applies David Harvey's\n       * number Theoretic Transform separately to each polynomial of a CipherText.\n       * The result is stored in the destinationNtt parameter.\n       *\n       * @function\n       * @name Evaluator#cipherTransformToNtt\n       * @param {CipherText} encrypted CipherText to transform\n       * @param {CipherText} [destinationNtt] CipherText destination to store the transformed result\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.cipherTransformToNtt(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherTransformToNtt(cipherTextA, cipherDest)\n       */\n      cipherTransformToNtt(\n        encrypted: CipherText,\n        destinationNtt?: CipherText\n      ): CipherText | void {\n        try {\n          if (destinationNtt) {\n            _instance.cipherTransformToNtt(\n              encrypted.instance,\n              destinationNtt.instance\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherTransformToNtt(encrypted.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a CipherText back from NTT domain. This functions applies the\n       * inverse of David Harvey's number Theoretic Transform separately to each\n       * polynomial of a CipherText. The result is stored in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#cipherTransformFromNtt\n       * @param {CipherText} encryptedNtt CipherText to transform\n       * @param {CipherText} [destination] CipherText destination to store the transformed result\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * // ... after cipherTransformToNtt ...\n       * const resultCipher = evaluator.cipherTransformFromNtt(cipherTextANtt)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherTransformFromNtt(cipherTextANtt, cipherDest)\n       */\n      cipherTransformFromNtt(\n        encryptedNtt: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherTransformFromNtt(\n              encryptedNtt.instance,\n              destination.instance\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherTransformFromNtt(encryptedNtt.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Applies a Galois automorphism to a CipherText and writes the result to the\n       * destination parameter. To evaluate the Galois automorphism, an appropriate\n       * set of Galois keys must also be provided. Dynamic memory allocations in\n       * the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * The desired Galois automorphism is given as a Galois element, and must be\n       * an odd integer in the interval [1, M-1], where M = 2*N, and N = degree(poly_modulus).\n       * Used with batching, a Galois element 3^i % M corresponds to a cyclic row\n       * rotation i steps to the left, and a Galois element 3^(N/2-i) % M corresponds\n       * to a cyclic row rotation i steps to the right. The Galois element M-1 corresponds\n       * to a column rotation (row swap) in BFV, and complex conjugation in CKKS.\n       * In the polynomial view (not batching), a Galois automorphism by a Galois\n       * element p changes Enc(plain(x)) to Enc(plain(x^p)).\n       *\n       * @function\n       * @name Evaluator#applyGalois\n       * @param {CipherText} encrypted CipherText to apply the automorphism\n       * @param {number} galoisElt number representing the Galois element\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * ...\n       * const evaluator = seal.Evaluator(context)\n       * const arr = Int32Array.from({ length: encoder.slotCount }, (_, i) => i)\n       * const plain = encoder.encode(arr)\n       * const cipher = encryptor.encrypt(plain)\n       * const cipherDest = seal.CipherText()\n       * const galElt = 2 * parms.polyModulusDegree - 1\n       * evaluator.applyGalois(cipher, galElt, galoisKeys, cipherDest)\n       */\n      applyGalois(\n        encrypted: CipherText,\n        galoisElt: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.applyGalois(\n              encrypted.instance,\n              galoisElt,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.applyGalois(\n            encrypted.instance,\n            galoisElt,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText matrix rows cyclically. When batching is used with the\n       * BFV/BGV scheme, this function rotates the encrypted PlainText matrix rows\n       * cyclically to the left (steps > 0) or to the right (steps < 0) and writes\n       * the result to the destination parameter. Since the size of the batched\n       * matrix is 2-by-(N/2), where N is the degree of the polynomial modulus,\n       * the number of steps to rotate must have absolute value at most N/2-1. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateRows\n       * @param {CipherText} encrypted CipherText to rotate rows\n       * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateRows(cipherTextA, 3, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateRows(cipherTextA, 3, galoisKeys, cipherDest)\n       */\n      rotateRows(\n        encrypted: CipherText,\n        steps: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateRows(\n              encrypted.instance,\n              steps,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateRows(\n            encrypted.instance,\n            steps,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText matrix columns cyclically. When batching is used with\n       * the BFV scheme, this function rotates the encrypted PlainText matrix columns\n       * cyclically, and writes the result to the destination parameter. Since the\n       * size of the batched matrix is 2-by-(N/2), where N is the degree of the\n       * polynomial modulus, this means simply swapping the two rows. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateColumns\n       * @param {CipherText} encrypted CipherText to rotate columns\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateColumns(cipherTextA, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateColumns(cipherTextA, galoisKeys, cipherDest)\n       */\n      rotateColumns(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateColumns(\n              encrypted.instance,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateColumns(\n            encrypted.instance,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText vector cyclically. When using the CKKS scheme, this function\n       * rotates the encrypted PlainText vector cyclically to the left (steps > 0)\n       * or to the right (steps < 0) and writes the result to the destination parameter.\n       * Since the size of the batched matrix is 2-by-(N/2), where N is the degree\n       * of the polynomial modulus, the number of steps to rotate must have absolute\n       * value at most N/2-1. Dynamic memory allocations in the process are allocated\n       * from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateVector\n       * @param {CipherText} encrypted CipherText to rotate the entire vector\n       * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateVector(cipherTextA, 3, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateVector(cipherTextA, 3, galoisKeys, cipherDest)\n       */\n      rotateVector(\n        encrypted: CipherText,\n        steps: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateVector(\n              encrypted.instance,\n              steps,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateVector(\n            encrypted.instance,\n            steps,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Complex conjugates PlainText slot values. When using the CKKS scheme, this\n       * function complex conjugates all values in the underlying PlainText, and\n       * writes the result to the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#complexConjugate\n       * @param {CipherText} encrypted CipherText to complex conjugate\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the conjugated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.complexConjugate(cipherTextA, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.complexConjugate(cipherTextA, galoisKeys, cipherDest)\n       */\n      complexConjugate(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.complexConjugate(\n              encrypted.instance,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.complexConjugate(\n            encrypted.instance,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sum all elements in the encrypted CipherText. The resulting CipherText contains the sum in every element.\n       *\n       * @function\n       * @name Evaluator#sumElements\n       * @param {CipherText} encrypted CipherText to sum elements\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      sumElements(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.sumElements(\n              encrypted.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.sumElements(\n            encrypted.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Perform the dot product (A.B) of two CipherTexts The resulting CipherText contains the dot product in every\n       * element.\n       *\n       * @function\n       * @name Evaluator#dotProduct\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after multiplication\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      dotProduct(\n        a: CipherText,\n        b: CipherText,\n        relinKeys: RelinKeys,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiply(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            _instance.relinearize(\n              destination.instance,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            _instance.sumElements(\n              destination.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.multiply(a.instance, b.instance, newDest.instance, pool)\n          _instance.relinearize(\n            newDest.instance,\n            relinKeys.instance,\n            newDest.instance,\n            pool\n          )\n          _instance.sumElements(\n            newDest.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Perform the dot product (A.B) of CipherText (A) and PlainText (B). The resulting CipherText contains the dot\n       * product in every element.\n       *\n       * @function\n       * @name Evaluator#dotProductPlain\n       * @param {CipherText} a CipherText operand A\n       * @param {PlainText} b PlainText operand B\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encoding / encrypting some data ...\n       * const resultCipher = evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      dotProductPlain(\n        a: CipherText,\n        b: PlainText,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiplyPlain(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            _instance.sumElements(\n              destination.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.multiplyPlain(\n            a.instance,\n            b.instance,\n            newDest.instance,\n            pool\n          )\n          _instance.sumElements(\n            newDest.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const EvaluatorInit = ({\n  loader\n}: LoaderOptions): EvaluatorDependencies => {\n  const library: Library = loader.library\n  return EvaluatorConstructor(library)\n}\n","import { Library, LoaderOptions } from './seal'\n\nexport type ExceptionDependencies = {\n  (): ExceptionConstructorOptions\n}\n\nexport type ExceptionConstructorOptions = {\n  (): Exception\n}\n\nexport type SealError = number | Error | string\n\nexport type Exception = {\n  readonly safe: (e: SealError) => Error\n}\n\nconst ExceptionConstructor =\n  (library: Library): ExceptionDependencies =>\n  (): ExceptionConstructorOptions =>\n  (): Exception => {\n    // Static methods\n    const _getException = library.getException\n\n    /**\n     * @implements Exception\n     */\n\n    /**\n     * @interface Exception\n     */\n    return {\n      /**\n       * Takes a caught exception in SEAL library and gets a safe error string\n       *\n       * @function\n       * @name Exception.safe\n       * @param {(number|Error|string)} error Unsafe error to normalize\n       * @returns {Error}\n       */\n      safe(error: number | Error | string): Error {\n        if (typeof error === 'number') {\n          return new Error(_getException(error))\n        }\n\n        if (error instanceof Error) {\n          return error\n        }\n        return new Error(error || 'Unknown Error!')\n      }\n    }\n  }\n\nexport const ExceptionInit = ({\n  loader\n}: LoaderOptions): ExceptionDependencies => {\n  const library: Library = loader.library\n  return ExceptionConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type GaloisKeysDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type GaloisKeysDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions\n}\n\nexport type GaloisKeysConstructorOptions = {\n  (): GaloisKeys\n}\n\nexport type GaloisKeys = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (galoisElt: number) => number\n  readonly hasKey: (galoisElt: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: GaloisKeys) => void\n  readonly clone: () => GaloisKeys\n  readonly move: (key: GaloisKeys) => void\n}\n\nconst GaloisKeysConstructor =\n  (library: Library): GaloisKeysDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions =>\n  (): GaloisKeys => {\n    const Constructor = library.GaloisKeys\n    let _instance = new Constructor()\n\n    /**\n     * @implements GaloisKeys\n     */\n\n    /**\n     * @interface GaloisKeys\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name GaloisKeys#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name GaloisKeys#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name GaloisKeys#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns the current number of keyswitching keys. Only keys that are\n       * non-empty are counted.\n       *\n       * @readonly\n       * @name GaloisKeys#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * Returns the index of a Galois key in the backing KSwitchKeys instance that\n       * corresponds to the given Galois element, assuming that it exists in the\n       * backing KSwitchKeys.\n       *\n       * @function\n       * @name GaloisKeys#getIndex\n       * @param {number} galoisElt The Galois element\n       * @returns {number} The index of the galois element\n       */\n      getIndex(galoisElt: number): number {\n        try {\n          return _instance.getIndex(galoisElt)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Returns whether a Galois key corresponding to a given Galois element exists.\n       *\n       * @function\n       * @name GaloisKeys#hasKey\n       * @param {number} galoisElt The Galois element\n       * @returns {boolean} True if the key exists\n       */\n      hasKey(galoisElt: number): boolean {\n        try {\n          return _instance.hasKey(galoisElt)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name GaloisKeys#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the GaloisKeys as a binary Uint8Array\n       *\n       * @function\n       * @name GaloisKeys#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the GaloisKeys in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a GaloisKeys from a base64 string\n       *\n       * @function\n       * @name GaloisKeys#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a GaloisKeys from an Uint8Array holding binary data\n       *\n       * @function\n       * @name GaloisKeys#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing GaloisKeys and overwrite this instance\n       *\n       * @function\n       * @name GaloisKeys#copy\n       * @param {GaloisKeys} key GaloisKeys to copy\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = seal.GaloisKeys()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: GaloisKeys) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this GaloisKeys\n       *\n       * @function\n       * @name GaloisKeys#clone\n       * @returns {GaloisKeys}\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): GaloisKeys {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = GaloisKeysConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a GaloisKeys into this one and delete the old reference\n       *\n       * @function\n       * @name GaloisKeys#move\n       * @param {GaloisKeys} key GaloisKeys to move\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = seal.GaloisKeys()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: GaloisKeys) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const GaloisKeysInit = ({\n  loader\n}: LoaderOptions): GaloisKeysDependencies => {\n  const library: Library = loader.library\n  return GaloisKeysConstructor(library)\n}\n","import { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { GaloisKeys, GaloisKeysConstructorOptions } from './galois-keys'\nimport { PublicKey, PublicKeyConstructorOptions } from './public-key'\nimport { RelinKeys, RelinKeysConstructorOptions } from './relin-keys'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { SecretKey, SecretKeyConstructorOptions } from './secret-key'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\n\nexport type KeyGeneratorDependencyOptions = {\n  readonly Exception: Exception\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport type KeyGeneratorDependencies = {\n  ({\n    Exception,\n    PublicKey,\n    SecretKey,\n    RelinKeys,\n    GaloisKeys,\n    Serializable\n  }: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions\n}\n\nexport type KeyGeneratorConstructorOptions = {\n  (context: Context, secretKey?: SecretKey): KeyGenerator\n}\n\nexport type KeyGenerator = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly secretKey: () => SecretKey\n  readonly createPublicKeySerializable: () => Serializable\n  readonly createPublicKey: () => PublicKey\n  readonly createRelinKeysSerializable: () => Serializable\n  readonly createRelinKeys: () => RelinKeys\n  readonly createGaloisKeysSerializable: (steps?: Int32Array) => Serializable\n  readonly createGaloisKeys: (steps?: Int32Array) => GaloisKeys\n}\n\nconst KeyGeneratorConstructor =\n  (library: Library): KeyGeneratorDependencies =>\n  ({\n    Exception,\n    PublicKey,\n    SecretKey,\n    RelinKeys,\n    GaloisKeys,\n    Serializable\n  }: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions =>\n  (context, secretKey): KeyGenerator => {\n    const Constructor = library.KeyGenerator\n    let _instance = constructInstance(context, secretKey)\n\n    function constructInstance(context: Context, secretKey?: SecretKey) {\n      try {\n        if (secretKey) {\n          return new Constructor(context.instance, secretKey.instance)\n        }\n        return new Constructor(context.instance)\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements KeyGenerator\n     */\n\n    /**\n     * @interface KeyGenerator\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name KeyGenerator#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name KeyGenerator#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name KeyGenerator#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Return the generated SecretKey\n       *\n       * @function\n       * @name KeyGenerator#secretKey\n       * @returns {SecretKey} The secret key that was generated upon instantiation of this KeyGenerator\n       */\n      secretKey(): SecretKey {\n        try {\n          const key = SecretKey()\n          const instance = _instance.secretKey()\n          key.inject(instance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Create a new PublicKey instance\n       *\n       * @function\n       * @name KeyGenerator#createPublicKey\n       * @returns {PublicKey} A new PublicKey instance\n       */\n      createPublicKey(): PublicKey {\n        try {\n          const key = PublicKey()\n          _instance.createPublicKey(key.instance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Create a new, Serializable PublicKey instance\n       *\n       * @function\n       * @name KeyGenerator#createPublicKeySerializable\n       * @returns {Serializable<PublicKey>} A new, serializable, PublicKey instance\n       */\n      createPublicKeySerializable(): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createPublicKeySerializable()\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns relinearization keys. This function returns\n       * relinearization keys in a fully expanded form and is meant to be used\n       * primarily for demo, testing, and debugging purposes.\n       *\n       * @function\n       * @name KeyGenerator#createRelinKeys\n       * @returns {RelinKeys} New RelinKeys from the KeyGenerator's internal secret key\n       */\n      createRelinKeys(): RelinKeys {\n        try {\n          const keys = RelinKeys()\n          _instance.createRelinKeys(keys.instance)\n          return keys\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns relinearization keys as a serializable object.\n       *\n       * Half of the key data is pseudo-randomly generated from a seed to reduce\n       * the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       *\n       * @function\n       * @name KeyGenerator#createRelinKeysSerializable\n       * @returns {Serializable<RelinKeys>} New, serializable RelinKeys from the KeyGenerator's internal secret key\n       */\n      createRelinKeysSerializable(): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createRelinKeysSerializable()\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns Galois keys. This function returns Galois keys in\n       * a fully expanded form and is meant to be used primarily for demo, testing,\n       * and debugging purposes. The user can optionally give an input a vector of desired\n       * Galois rotation step counts, where negative step counts correspond to\n       * rotations to the right and positive step counts correspond to rotations to\n       * the left. A step count of zero can be used to indicate a column rotation\n       * in the BFV scheme complex conjugation in the CKKS scheme.\n       *\n       * @function\n       * @name KeyGenerator#createGaloisKeys\n       * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n       * @returns {GaloisKeys} New GaloisKeys from the KeyGenerator's internal secret key\n       */\n      createGaloisKeys(steps: Int32Array = Int32Array.from([])): GaloisKeys {\n        try {\n          const keys = GaloisKeys()\n          _instance.createGaloisKeys(steps, keys.instance)\n          return keys\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns Galois keys as a serializable object. This function\n       * creates specific Galois keys that can be used to apply specific Galois\n       * automorphisms on encrypted data. The user can optionally give an input a vector\n       * of desired Galois rotation step counts, where negative step counts\n       * correspond to rotations to the right and positive step counts correspond\n       * to rotations to the left. A step count of zero can be used to indicate\n       * a column rotation in the BFV scheme complex conjugation in the CKKS scheme.\n       * Half of the key data is pseudo-randomly generated from a seed to reduce\n       * the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       * @function\n       * @name KeyGenerator#createGaloisKeysSerializable\n       * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n       * @returns {Serializable<GaloisKeys>} Base64 encoded string\n       */\n      createGaloisKeysSerializable(\n        steps: Int32Array = Int32Array.from([])\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createGaloisKeysSerializable(steps)\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const KeyGeneratorInit = ({\n  loader\n}: LoaderOptions): KeyGeneratorDependencies => {\n  const library: Library = loader.library\n  return KeyGeneratorConstructor(library)\n}\n","import { Library, LoaderOptions } from './seal'\n\nexport type MemoryPoolHandleDependencies = {\n  (): MemoryPoolHandleConstructorOptions\n}\n\nexport type MemoryPoolHandleConstructorOptions = {\n  (): MemoryPoolHandle\n}\n\nexport type MemoryPoolHandle = {\n  readonly global: any\n  readonly threadLocal: any\n}\n\nconst MemoryPoolHandleConstructor =\n  (library: Library): MemoryPoolHandleDependencies =>\n  (): MemoryPoolHandleConstructorOptions =>\n  (): MemoryPoolHandle => {\n    // Static methods\n    const _global = library.MemoryPoolHandle.MemoryPoolHandleGlobal\n    const _threadLocal = library.MemoryPoolHandle.MemoryPoolHandleThreadLocal\n\n    /**\n     * @implements MemoryPoolHandle\n     */\n\n    /**\n     * @interface MemoryPoolHandle\n     */\n    return {\n      /**\n       * The MemoryPoolHandle pointing to the global memory pool.\n       *\n       * @readonly\n       * @name MemoryPoolHandle.global\n       * @type {MemoryPoolHandle.global}\n       */\n      get global() {\n        /**\n         * @typedef {MemoryPoolHandle.global} MemoryPoolHandle.global\n         */\n        return _global()\n      },\n\n      /**\n       * The MemoryPoolHandle pointing to the thread-local memory pool.\n       *\n       * @readonly\n       * @name MemoryPoolHandle.threadLocal\n       * @type {MemoryPoolHandle.threadLocal}\n       */\n      get threadLocal() {\n        /**\n         * @typedef {MemoryPoolHandle.threadLocal} MemoryPoolHandle.threadLocal\n         */\n        return _threadLocal()\n      }\n    }\n  }\n\nexport const MemoryPoolHandleInit = ({\n  loader\n}: LoaderOptions): MemoryPoolHandleDependencies => {\n  const library: Library = loader.library\n  return MemoryPoolHandleConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Exception, SealError } from './exception'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type ModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type ModulusDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: ModulusDependencyOptions): ModulusConstructorOptions\n}\n\nexport type ModulusConstructorOptions = {\n  (value: bigint): Modulus\n}\n\nexport type Modulus = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setValue: (value: bigint) => void\n  readonly value: bigint\n  readonly bitCount: number\n  readonly isZero: boolean\n  readonly isPrime: boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst ModulusConstructor =\n  (library: Library): ModulusDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: ModulusDependencyOptions): ModulusConstructorOptions =>\n  (value: bigint): Modulus => {\n    // Static methods\n    const Constructor = library.Modulus\n\n    let _instance = createModulus(value)\n\n    function createModulus(value: bigint) {\n      try {\n        const inst = new Constructor()\n        inst.setValue(value.toString())\n        return inst\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n\n    /**\n     * @implements Modulus\n     */\n\n    /**\n     * @interface Modulus\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Modulus#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name Modulus#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Modulus#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Loads a Modulus from a string representing an uint64 value.\n       *\n       * @function\n       * @name Modulus#setValue\n       * @param {BigInt} value BigInt value to set\n       */\n      setValue(value: bigint) {\n        try {\n          _instance.setValue(value.toString())\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The value of the current Modulus as a BigInt.\n       *\n       * @readonly\n       * @name Modulus#value\n       * @type {BigInt}\n       */\n      get value() {\n        // eslint-disable-next-line no-undef\n        return BigInt(_instance.value())\n      },\n\n      /**\n       * The significant bit count of the value of the current Modulus.\n       *\n       * @readonly\n       * @name Modulus#bitCount\n       * @type {number}\n       */\n      get bitCount() {\n        return _instance.bitCount()\n      },\n\n      /**\n       * Whether the value of the current Modulus is zero.\n       *\n       * @readonly\n       * @name Modulus#isZero\n       * @type {boolean}\n       */\n      get isZero() {\n        return _instance.isZero()\n      },\n\n      /**\n       * Whether the value of the current Modulus is a prime number.\n       *\n       * @readonly\n       * @name Modulus#isPrime\n       * @type {boolean}\n       */\n      get isPrime() {\n        return _instance.isPrime()\n      },\n\n      /**\n       * Save the Modulus as a base64 string\n       *\n       * @function\n       * @name Modulus#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the Modulus as a binary Uint8Array\n       *\n       * @function\n       * @name Modulus#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the Modulus in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a Modulus from a base64 string\n       *\n       * @function\n       * @name Modulus#load\n       * @param {string} encoded Base64 encoded string\n       */\n      load(encoded: string) {\n        try {\n          _instance.loadFromString(encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a Modulus from an Uint8Array holding binary data\n       *\n       * @function\n       * @name Modulus#loadArray\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(array: Uint8Array) {\n        try {\n          _instance.loadFromArray(array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const ModulusInit = ({ loader }: LoaderOptions): ModulusDependencies => {\n  const library: Library = loader.library\n  return ModulusConstructor(library)\n}\n","import { Exception, SealError } from './exception'\nimport { Instance, Library, LoaderOptions } from './seal'\n\nexport type ParmsIdTypeDependencyOptions = {\n  readonly Exception: Exception\n}\n\nexport type ParmsIdTypeDependencies = {\n  ({ Exception }: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions\n}\n\nexport type ParmsIdTypeConstructorOptions = {\n  (): ParmsIdType\n}\n\nexport type ParmsIdType = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly values: BigUint64Array\n}\n\nconst ParmsIdTypeConstructor =\n  (library: Library): ParmsIdTypeDependencies =>\n  ({\n    Exception\n  }: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions =>\n  (): ParmsIdType => {\n    const Constructor = library.ParmsIdType\n\n    let _instance: Instance\n\n    /**\n     * @implements ParmsIdType\n     */\n\n    /**\n     * @interface ParmsIdType\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name ParmsIdType#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name ParmsIdType#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name ParmsIdType#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * The values of the current ParmsIdType as an Array of BigInts.\n       *\n       * @readonly\n       * @name ParmsIdType#values\n       * @type {BigUint64Array}\n       */\n      get values() {\n        try {\n          const instance = _instance.values()\n          return BigUint64Array.from(instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const ParmsIdTypeInit = ({\n  loader\n}: LoaderOptions): ParmsIdTypeDependencies => {\n  const library: Library = loader.library\n  return ParmsIdTypeConstructor(library)\n}\n","import { Exception, SealError } from './exception'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\nimport { Library, LoaderOptions } from './seal'\nimport { Vector, VectorConstructorOptions } from './vector'\n\nexport type PlainModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly Modulus: ModulusConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PlainModulusDependencies = {\n  ({\n    Exception,\n    Modulus,\n    Vector\n  }: PlainModulusDependencyOptions): PlainModulusConstructorOptions\n}\n\nexport type PlainModulusConstructorOptions = {\n  (): PlainModulus\n}\n\nexport type PlainModulus = {\n  readonly Batching: (polyModulusDegree: number, bitSize: number) => Modulus\n  readonly BatchingVector: (\n    polyModulusDegree: number,\n    bitSizes: Int32Array\n  ) => Vector\n}\n\nconst PlainModulusConstructor =\n  (library: Library): PlainModulusDependencies =>\n  ({\n    Exception,\n    Modulus,\n    Vector\n  }: PlainModulusDependencyOptions): PlainModulusConstructorOptions =>\n  (): PlainModulus => {\n    // Static methods\n    const _Batching = library.PlainModulus.Batching\n    const _BatchingVector = library.PlainModulus.BatchingVector\n\n    /**\n     * @implements PlainModulus\n     */\n\n    /**\n     * @interface PlainModulus\n     */\n    return {\n      /**\n       * Creates a prime number PlainModulus for use as plainPlainModulus encryption\n       * parameter that supports batching with a given polyPlainModulusDegree.\n       *\n       * @function\n       * @name PlainModulus.Batching\n       * @param {number} polyModulusDegree The degree of the polynomial modulus\n       * @param {number} bitSize The bit-size of the desired prime number\n       * @returns {Modulus} A PlainModulus containing the prime number\n       */\n      Batching(polyModulusDegree: number, bitSize: number): Modulus {\n        try {\n          const smallMod = Modulus(BigInt(0))\n          smallMod.inject(_Batching(polyModulusDegree, bitSize))\n          return smallMod\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Creates several prime number PlainModulus elements that can be used as\n       * plainPlainModulus encryption parameters, each supporting batching with a given\n       * polyPlainModulusDegree.\n       *\n       * @function\n       * @name PlainModulus.BatchingVector\n       * @param {Number} polyPlainModulusDegree The degree of the polynomial modulus\n       * @param {Int32Array} bitSizes Int32Array containing values representing bit-sizes of primes\n       * @returns {Vector} Vector of Modulus containing prime numbers\n       */\n      BatchingVector(\n        polyPlainModulusDegree: number,\n        bitSizes: Int32Array\n      ): Vector {\n        try {\n          const vectBitSizes = Vector()\n          vectBitSizes.from(bitSizes)\n          const vect = _BatchingVector(\n            polyPlainModulusDegree,\n            vectBitSizes.instance\n          )\n          vectBitSizes.delete()\n          return vect\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PlainModulusInit = ({\n  loader\n}: LoaderOptions): PlainModulusDependencies => {\n  const library: Library = loader.library\n  return PlainModulusConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { INVALID_PLAIN_CONSRUCTOR_OPTIONS } from './constants'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\nexport type PlainTextDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PlainTextDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: PlainTextDependencyOptions): PlainTextConstructorOptions\n}\n\nexport type PlainTextConstructorOptions = {\n  ({\n    capacity,\n    coeffCount,\n    pool\n  }?: {\n    capacity?: number\n    coeffCount?: number\n    pool?: MemoryPoolHandle\n  }): PlainText\n}\n\nexport type PlainText = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (capacity: number) => void\n  readonly shrinkToFit: () => void\n  readonly release: () => void\n  readonly resize: (coeffCount: number) => void\n  readonly setZero: () => void\n  readonly isZero: boolean\n  readonly capacity: number\n  readonly coeffCount: number\n  readonly significantCoeffCount: number\n  readonly nonzeroCoeffCount: number\n  readonly toPolynomial: () => string\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (plain: PlainText) => void\n  readonly clone: () => PlainText\n  readonly move: (plain: PlainText) => void\n}\n\nconst PlainTextConstructor =\n  (library: Library): PlainTextDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: PlainTextDependencyOptions): PlainTextConstructorOptions =>\n  ({\n    capacity,\n    coeffCount,\n    pool = MemoryPoolHandle.global\n  } = {}): PlainText => {\n    // Static methods\n    const Constructor = library.Plaintext\n\n    let _instance = construct({\n      capacity,\n      coeffCount,\n      pool\n    })\n\n    function construct({\n      capacity,\n      coeffCount,\n      pool = MemoryPoolHandle.global\n    }: {\n      capacity?: number\n      coeffCount?: number\n      pool?: MemoryPoolHandle\n    }) {\n      try {\n        if (capacity === undefined && coeffCount === undefined) {\n          return new Constructor(pool)\n        } else if (capacity === undefined && coeffCount !== undefined) {\n          return new Constructor(coeffCount, pool)\n        } else if (capacity !== undefined && coeffCount !== undefined) {\n          return new Constructor(capacity, coeffCount, pool)\n        } else {\n          throw new Error(INVALID_PLAIN_CONSRUCTOR_OPTIONS)\n        }\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements PlainText\n     */\n\n    /**\n     * @interface PlainText\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name PlainText#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name PlainText#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name PlainText#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of a plaintext\n       * with given capacity.\n       *\n       * @function\n       * @name PlainText#reserve\n       * @param {number} capacity The capacity to reserve\n       */\n      reserve(capacity: number) {\n        try {\n          return _instance.reserve(capacity)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of the current\n       * PlainText and copies it over to the new location. This function is meant\n       * to reduce the memory use of the PlainText to smallest possible and can be\n       * particularly important after modulus switching.\n       *\n       * @function\n       * @name PlainText#shrinkToFit\n       */\n      shrinkToFit() {\n        _instance.shrinkToFit()\n      },\n\n      /**\n       * Resets the PlainText. This function releases any memory allocated by the\n       * PlainText, returning it to the memory pool.\n       *\n       * @function\n       * @name PlainText#release\n       */\n      release() {\n        _instance.release()\n      },\n\n      /**\n       * Resizes the PlainText to have a given coefficient count. The PlainText\n       * is automatically reallocated if the new coefficient count does not fit in\n       * the current capacity.\n       *\n       * @function\n       * @name PlainText#resize\n       * @param {number} coeffCount The number of coefficients in the plaintext polynomial\n       */\n      resize(coeffCount: number) {\n        try {\n          _instance.resize(coeffCount)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the PlainText polynomial to zero.\n       *\n       * @function\n       * @name PlainText#setZero\n       */\n      setZero() {\n        _instance.setZero()\n      },\n\n      /**\n       * Whether the current PlainText polynomial has all zero coefficients.\n       *\n       * @readonly\n       * @name PlainText#isZero\n       * @type {boolean}\n       */\n      get isZero() {\n        return _instance.isZero()\n      },\n\n      /**\n       * The capacity of the current allocation.\n       *\n       * @readonly\n       * @name PlainText#capacity\n       * @type {number}\n       */\n      get capacity() {\n        return _instance.capacity()\n      },\n\n      /**\n       * The coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#coeffCount\n       * @type {number}\n       */\n      get coeffCount() {\n        return _instance.coeffCount()\n      },\n\n      /**\n       * The significant coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#significantCoeffCount\n       * @type {number}\n       */\n      get significantCoeffCount() {\n        return _instance.significantCoeffCount()\n      },\n\n      /**\n       * Returns the non-zero coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#nonzeroCoeffCount\n       * @type {number}\n       */\n      get nonzeroCoeffCount() {\n        return _instance.nonzeroCoeffCount()\n      },\n\n      /**\n       * Returns a human-readable string description of the PlainText polynomial.\n       *\n       * The returned string is of the form \"7FFx^3 + 1x^1 + 3\" with a format\n       * summarized by the following:\n       * 1. Terms are listed in order of strictly decreasing exponent\n       * 2. Coefficient values are non-negative and in hexadecimal format (hexadecimal\n       * letters are in upper-case)\n       * 3. Exponents are positive and in decimal format\n       * 4. Zero coefficient terms (including the constant term) are omitted unless\n       * the polynomial is exactly 0 (see rule 9)\n       * 5. Term with the exponent value of one is written as x^1\n       * 6. Term with the exponent value of zero (the constant term) is written as\n       * just a hexadecimal number without x or exponent\n       * 7. Terms are separated exactly by <space>+<space>\n       * 8. Other than the +, no other terms have whitespace\n       * 9. If the polynomial is exactly 0, the string \"0\" is returned\n       *\n       * @function\n       * @name PlainText#toPolynomial\n       * @throws std::invalid_argument if the PlainText is in NTT transformed form\n       * @returns {string} Polynomial string\n       */\n      toPolynomial(): string {\n        try {\n          return _instance.toPolynomial()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Whether the PlainText is in NTT form.\n       *\n       * @readonly\n       * @name PlainText#isNttForm\n       * @type {boolean}\n       */\n      get isNttForm() {\n        return _instance.isNttForm()\n      },\n\n      /**\n       * The reference to parmsId of the PlainText. The parmsId must remain zero unless the\n       * PlainText polynomial is in NTT form.\n       *\n       * @see {@link EncryptionParameters} for more information about parmsId.\n       *\n       * @readonly\n       * @name PlainText#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * The reference to the scale. This is only needed when using the CKKS\n       * encryption scheme. The user should have little or no reason to ever change\n       * the scale by hand.\n       *\n       * @readonly\n       * @name PlainText#scale\n       * @type {number}\n       */\n      get scale() {\n        return _instance.scale()\n      },\n\n      /**\n       * Sets the PlainText scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @function\n       * @name PlainText#setScale\n       * @param {number} scale The scale to set\n       */\n      setScale(scale: number) {\n        _instance.setScale(scale)\n      },\n\n      /**\n       * The currently used MemoryPoolHandle.\n       *\n       * @readonly\n       * @name PlainText#pool\n       * @type {MemoryPoolHandle}\n       */\n      get pool() {\n        return _instance.pool()\n      },\n\n      /**\n       * Save the PlainText to a base64 string\n       *\n       * @function\n       * @name PlainText#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the PlainText as a binary Uint8Array\n       *\n       * @function\n       * @name PlainText#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the PlainText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a PlainText from a base64 string\n       *\n       * @function\n       * @name PlainText#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a PlainText from an Uint8Array holding binary data\n       *\n       * @function\n       * @name PlainText#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing PlainText and overwrite this instance\n       *\n       * @function\n       * @name PlainText#copy\n       * @param {PlainText} plain PlainText to copy\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = seal.PlainText()\n       * plainTextB.copy(plainTextA)\n       * // plainTextB holds a copy of plainTextA\n       */\n      copy(plain: PlainText) {\n        try {\n          _instance.copy(plain.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this PlainText\n       *\n       * @function\n       * @name PlainText#clone\n       * @returns {PlainText}\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = plainTextA.clone()\n       * // plainTextB holds a copy of plainTextA\n       */\n      clone(): PlainText {\n        try {\n          const clonedInstance = _instance.clone()\n          const plain = PlainTextConstructor(library)({\n            Exception,\n            ComprModeType,\n            ParmsIdType,\n            MemoryPoolHandle,\n            Vector\n          })()\n          plain.unsafeInject(clonedInstance)\n          return plain\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a PlainText into this one and delete the old reference\n       *\n       * @function\n       * @name PlainText#move\n       * @param {PlainText} plain PlainText to move\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = seal.PlainText()\n       * plainTextB.move(plainTextA)\n       * // plainTextB holds a the instance of plainTextA.\n       * // plainTextA no longer holds an instance\n       */\n      move(plain: PlainText) {\n        try {\n          _instance.move(plain.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          plain.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PlainTextInit = ({\n  loader\n}: LoaderOptions): PlainTextDependencies => {\n  const library: Library = loader.library\n  return PlainTextConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type PublicKeyDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PublicKeyDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: PublicKeyDependencyOptions): PublicKeyConstructorOptions\n}\n\nexport type PublicKeyConstructorOptions = {\n  (): PublicKey\n}\n\nexport type PublicKey = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: PublicKey) => void\n  readonly clone: () => PublicKey\n  readonly move: (key: PublicKey) => void\n}\n\nconst PublicKeyConstructor =\n  (library: Library): PublicKeyDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: PublicKeyDependencyOptions): PublicKeyConstructorOptions =>\n  (): PublicKey => {\n    const Constructor = library.PublicKey\n    let _instance = new Constructor()\n\n    /**\n     * @implements PublicKey\n     */\n\n    /**\n     * @interface PublicKey\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name PublicKey#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name PublicKey#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name PublicKey#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name PublicKey#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the PublicKey as a binary Uint8Array\n       *\n       * @function\n       * @name PublicKey#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the PublicKey in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a PublicKey from a base64 string\n       *\n       * @function\n       * @name PublicKey#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a PublicKey from an Uint8Array holding binary data\n       *\n       * @function\n       * @name PublicKey#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing PublicKey and overwrite this instance\n       *\n       * @function\n       * @name PublicKey#copy\n       * @param {PublicKey} key PublicKey to copy\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = seal.PublicKey()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: PublicKey) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this PublicKey\n       *\n       * @function\n       * @name PublicKey#clone\n       * @returns {PublicKey}\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): PublicKey {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = PublicKeyConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a PublicKey into this one and delete the old reference\n       *\n       * @function\n       * @name PublicKey#move\n       * @param {PublicKey} key PublicKey to move\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = seal.PublicKey()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: PublicKey) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PublicKeyInit = ({\n  loader\n}: LoaderOptions): PublicKeyDependencies => {\n  const library: Library = loader.library\n  return PublicKeyConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type RelinKeysDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type RelinKeysDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: RelinKeysDependencyOptions): RelinKeysConstructorOptions\n}\n\nexport type RelinKeysConstructorOptions = {\n  (): RelinKeys\n}\n\nexport type RelinKeys = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (keyPower: number) => number\n  readonly hasKey: (keyPower: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: RelinKeys) => void\n  readonly clone: () => RelinKeys\n  readonly move: (key: RelinKeys) => void\n}\n\nconst RelinKeysConstructor =\n  (library: Library): RelinKeysDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: RelinKeysDependencyOptions): RelinKeysConstructorOptions =>\n  (): RelinKeys => {\n    const Constructor = library.RelinKeys\n    let _instance = new Constructor()\n\n    /**\n     * @implements RelinKeys\n     */\n\n    /**\n     * @interface RelinKeys\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name RelinKeys#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name RelinKeys#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name RelinKeys#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns the current number of keyswitching keys. Only keys that are\n       * non-empty are counted.\n       *\n       * @readonly\n       * @name RelinKeys#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * Returns the index of a relinearization key in the backing KSwitchKeys\n       * instance that corresponds to the given secret key power, assuming that\n       * it exists in the backing KSwitchKeys.\n       *\n       * @function\n       * @name RelinKeys#getIndex\n       * @param {number} keyPower The power of the secret key\n       * @returns {number} The index of the relin key\n       */\n      getIndex(keyPower: number): number {\n        try {\n          return _instance.getIndex(keyPower)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Returns whether a relinearization key corresponding to a given power of\n       * the secret key exists.\n       *\n       * @function\n       * @name RelinKeys#hasKey\n       * @param {number} keyPower The power of the secret key\n       * @returns {boolean} True if the power exists\n       */\n      hasKey(keyPower: number): boolean {\n        try {\n          return _instance.hasKey(keyPower)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name RelinKeys#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the RelinKeys as a binary Uint8Array\n       *\n       * @function\n       * @name RelinKeys#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the RelinKeys in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a RelinKeys from a base64 string\n       *\n       * @function\n       * @name RelinKeys#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a RelinKeys from an Uint8Array holding binary data\n       *\n       * @function\n       * @name RelinKeys#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing RelinKeys and overwrite this instance\n       *\n       * @function\n       * @name RelinKeys#copy\n       * @param {RelinKeys} key RelinKeys to copy\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = seal.RelinKeys()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: RelinKeys) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this RelinKeys\n       *\n       * @function\n       * @name RelinKeys#clone\n       * @returns {RelinKeys}\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): RelinKeys {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = RelinKeysConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a RelinKeys into this one and delete the old reference\n       *\n       * @function\n       * @name RelinKeys#move\n       * @param {RelinKeys} key RelinKeys to move\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = seal.RelinKeys()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: RelinKeys) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const RelinKeysInit = ({\n  loader\n}: LoaderOptions): RelinKeysDependencies => {\n  const library: Library = loader.library\n  return RelinKeysConstructor(library)\n}\n","import { Library, LoaderOptions } from './seal'\n\nexport type SchemeTypeDependencies = {\n  (): SchemeTypeConstructorOptions\n}\n\nexport type SchemeTypeConstructorOptions = {\n  (): SchemeType\n}\n\nexport type SchemeType = {\n  readonly none: any\n  readonly bfv: any\n  readonly ckks: any\n  readonly bgv: any\n}\n\nconst SchemeTypeConstructor =\n  (library: Library): SchemeTypeDependencies =>\n  (): SchemeTypeConstructorOptions =>\n  (): SchemeType => {\n    // Static methods\n    const _none = library.SchemeType.none\n    const _bfv = library.SchemeType.bfv\n    const _ckks = library.SchemeType.ckks\n    const _bgv = library.SchemeType.bgv\n\n    /**\n     * @implements SchemeType\n     */\n\n    /**\n     * @interface SchemeType\n     */\n    return {\n      /**\n       * Return the 'none' scheme type\n       *\n       * @readonly\n       * @name SchemeType.none\n       * @type {SchemeType.none}\n       */\n      get none() {\n        /**\n         * @typedef {SchemeType.none} SchemeType.none\n         */\n        return _none\n      },\n\n      /**\n       * Return the 'bfv' scheme type\n       *\n       * @readonly\n       * @name SchemeType.bfv\n       * @type {SchemeType.bfv}\n       */\n      get bfv() {\n        /**\n         * @typedef {SchemeType.bfv} SchemeType.bfv\n         */\n        return _bfv\n      },\n\n      /**\n       * Return the 'ckks' scheme type\n       *\n       * @readonly\n       * @name SchemeType.ckks\n       * @type {SchemeType.ckks}\n       */\n      get ckks() {\n        /**\n         * @typedef {SchemeType.ckks} SchemeType.ckks\n         */\n        return _ckks\n      },\n\n      /**\n       * Return the 'bgv' scheme type\n       *\n       * @readonly\n       * @name SchemeType.bgv\n       * @type {SchemeType.bgv}\n       */\n      get bgv() {\n        /**\n         * @typedef {SchemeType.bgv} SchemeType.bgv\n         */\n        return _bgv\n      }\n    }\n  }\n\nexport const SchemeTypeInit = ({\n  loader\n}: LoaderOptions): SchemeTypeDependencies => {\n  const library: Library = loader.library\n  return SchemeTypeConstructor(library)\n}\n","import { version } from '../../package.json'\nimport {\n  BatchEncoderConstructorOptions,\n  BatchEncoderDependencies\n} from './batch-encoder'\nimport {\n  CipherTextConstructorOptions,\n  CipherTextDependencies\n} from './cipher-text'\nimport {\n  CKKSEncoderConstructorOptions,\n  CKKSEncoderDependencies\n} from './ckks-encoder'\nimport { CoeffModulus, CoeffModulusDependencies } from './coeff-modulus'\nimport { ComprModeType, ComprModeTypeDependencies } from './compr-mode-type'\nimport { ContextConstructorOptions, ContextDependencies } from './context'\nimport {\n  ContextDataConstructorOptions,\n  ContextDataDependencies\n} from './context-data'\nimport { DecryptorConstructorOptions, DecryptorDependencies } from './decryptor'\nimport {\n  EncryptionParameterQualifiersConstructorOptions,\n  EncryptionParameterQualifiersDependencies\n} from './encryption-parameter-qualifiers'\nimport {\n  EncryptionParametersConstructorOptions,\n  EncryptionParametersDependencies\n} from './encryption-parameters'\nimport { EncryptorConstructorOptions, EncryptorDependencies } from './encryptor'\nimport { EvaluatorConstructorOptions, EvaluatorDependencies } from './evaluator'\nimport { Exception, ExceptionDependencies } from './exception'\nimport {\n  GaloisKeysConstructorOptions,\n  GaloisKeysDependencies\n} from './galois-keys'\nimport {\n  KeyGeneratorConstructorOptions,\n  KeyGeneratorDependencies\n} from './key-generator'\nimport {\n  MemoryPoolHandle,\n  MemoryPoolHandleDependencies\n} from './memory-pool-handle'\nimport { ModulusConstructorOptions, ModulusDependencies } from './modulus'\nimport {\n  ParmsIdTypeConstructorOptions,\n  ParmsIdTypeDependencies\n} from './parms-id-type'\nimport { PlainModulus, PlainModulusDependencies } from './plain-modulus'\nimport {\n  PlainTextConstructorOptions,\n  PlainTextDependencies\n} from './plain-text'\nimport {\n  PublicKeyConstructorOptions,\n  PublicKeyDependencies\n} from './public-key'\nimport {\n  RelinKeysConstructorOptions,\n  RelinKeysDependencies\n} from './relin-keys'\nimport { SchemeType, SchemeTypeDependencies } from './scheme-type'\nimport {\n  SecretKeyConstructorOptions,\n  SecretKeyDependencies\n} from './secret-key'\nimport { SecurityLevel, SecurityLevelDependencies } from './security-level'\nimport {\n  SerializableConstructorOptions,\n  SerializableDependencies\n} from './serializable'\nimport { VectorConstructorOptions, VectorDependencies } from './vector'\n\nexport type Instance = any\nexport type Loader = any\nexport type Library = any\nexport type Dependencies = any\nexport type LoaderOptions = {\n  readonly loader: Loader\n}\n\nexport type SEALLibrary = {\n  readonly BatchEncoder: BatchEncoderConstructorOptions\n  readonly CipherText: CipherTextConstructorOptions\n  readonly CKKSEncoder: CKKSEncoderConstructorOptions\n  readonly CoeffModulus: CoeffModulus\n  readonly ComprModeType: ComprModeType\n  readonly ContextData: ContextDataConstructorOptions\n  readonly Context: ContextConstructorOptions\n  readonly Decryptor: DecryptorConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly Encryptor: EncryptorConstructorOptions\n  readonly Evaluator: EvaluatorConstructorOptions\n  readonly Exception: Exception\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly KeyGenerator: KeyGeneratorConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Modulus: ModulusConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n  readonly PlainModulus: PlainModulus\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n  readonly Serializable: SerializableConstructorOptions\n  readonly Vector: VectorConstructorOptions\n  readonly Version: string\n}\ntype SEALConstructorOptions = {\n  readonly BatchEncoder: BatchEncoderDependencies\n  readonly CipherText: CipherTextDependencies\n  readonly CKKSEncoder: CKKSEncoderDependencies\n  readonly CoeffModulus: CoeffModulusDependencies\n  readonly ComprModeType: ComprModeTypeDependencies\n  readonly ContextData: ContextDataDependencies\n  readonly Context: ContextDependencies\n  readonly Decryptor: DecryptorDependencies\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersDependencies\n  readonly EncryptionParameters: EncryptionParametersDependencies\n  readonly Encryptor: EncryptorDependencies\n  readonly Evaluator: EvaluatorDependencies\n  readonly Exception: ExceptionDependencies\n  readonly GaloisKeys: GaloisKeysDependencies\n  readonly KeyGenerator: KeyGeneratorDependencies\n  readonly MemoryPoolHandle: MemoryPoolHandleDependencies\n  readonly Modulus: ModulusDependencies\n  readonly ParmsIdType: ParmsIdTypeDependencies\n  readonly PlainText: PlainTextDependencies\n  readonly PlainModulus: PlainModulusDependencies\n  readonly PublicKey: PublicKeyDependencies\n  readonly RelinKeys: RelinKeysDependencies\n  readonly SchemeType: SchemeTypeDependencies\n  readonly SecretKey: SecretKeyDependencies\n  readonly SecurityLevel: SecurityLevelDependencies\n  readonly Serializable: SerializableDependencies\n  readonly Vector: VectorDependencies\n}\n\n/**\n * @implements SEAL\n */\nexport const SEALConstructor = ({\n  BatchEncoder,\n  CipherText,\n  CKKSEncoder,\n  CoeffModulus,\n  ComprModeType,\n  ContextData,\n  Context,\n  Decryptor,\n  EncryptionParameterQualifiers,\n  EncryptionParameters,\n  Encryptor,\n  Evaluator,\n  Exception,\n  GaloisKeys,\n  KeyGenerator,\n  MemoryPoolHandle,\n  Modulus,\n  ParmsIdType,\n  PlainText,\n  PlainModulus,\n  PublicKey,\n  RelinKeys,\n  SchemeType,\n  SecretKey,\n  SecurityLevel,\n  Serializable,\n  Vector\n}: SEALConstructorOptions): SEALLibrary => {\n  // Unfortunately, this library has nested depenencies\n  // so we need to load them in order.\n\n  // Define our singletons\n  const exception = Exception()()\n  const comprModeType = ComprModeType()()\n  const memoryPoolHandle = MemoryPoolHandle()()\n  const securityLevel = SecurityLevel()()\n  const schemeType = SchemeType()()\n\n  // Define our constructors (ORDER MATTERS)\n  const vector = Vector({ Exception: exception })\n  const coeffModulus = CoeffModulus({\n    Exception: exception,\n    SecurityLevel: securityLevel,\n    Vector: vector\n  })()\n  const modulus = Modulus({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const plainModulus = PlainModulus({\n    Exception: exception,\n    Modulus: modulus,\n    Vector: vector\n  })()\n  const serializable = Serializable({\n    Exception: exception,\n    Vector: vector,\n    ComprModeType: comprModeType\n  })\n  const parmsIdType = ParmsIdType({ Exception: exception })\n  const plainText = PlainText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const cipherText = CipherText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const batchEncoder = BatchEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const ckksEncoder = CKKSEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const encryptionParameterQualifiers = EncryptionParameterQualifiers()\n  const encryptionParameters = EncryptionParameters({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Modulus: modulus,\n    SchemeType: schemeType,\n    ParmsIdType: parmsIdType,\n    Vector: vector\n  })\n  const contextData = ContextData({\n    Exception: exception,\n    EncryptionParameters: encryptionParameters,\n    ParmsIdType: parmsIdType,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers\n  })\n  const context = Context({\n    ParmsIdType: parmsIdType,\n    ContextData: contextData,\n    SecurityLevel: securityLevel\n  })\n  const decryptor = Decryptor({\n    Exception: exception,\n    PlainText: plainText\n  })\n  const encryptor = Encryptor({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    Serializable: serializable\n  })\n  const evaluator = Evaluator({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    PlainText: plainText\n  })\n  const publicKey = PublicKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const secretKey = SecretKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const relinKeys = RelinKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const galoisKeys = GaloisKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const keyGenerator = KeyGenerator({\n    Exception: exception,\n    PublicKey: publicKey,\n    SecretKey: secretKey,\n    RelinKeys: relinKeys,\n    GaloisKeys: galoisKeys,\n    Serializable: serializable\n  })\n\n  /**\n   * @interface SEAL\n   */\n  return {\n    BatchEncoder: batchEncoder,\n    CipherText: cipherText,\n    CKKSEncoder: ckksEncoder,\n    CoeffModulus: coeffModulus, // Singleton\n    ComprModeType: comprModeType, // Singleton\n    ContextData: contextData,\n    Context: context,\n    Decryptor: decryptor,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers,\n    EncryptionParameters: encryptionParameters,\n    Encryptor: encryptor,\n    Evaluator: evaluator,\n    Exception: exception, // Singleton\n    GaloisKeys: galoisKeys,\n    KeyGenerator: keyGenerator,\n    MemoryPoolHandle: memoryPoolHandle, // Singleton\n    Modulus: modulus,\n    ParmsIdType: parmsIdType,\n    PlainText: plainText,\n    PlainModulus: plainModulus, // Singleton\n    PublicKey: publicKey,\n    RelinKeys: relinKeys,\n    SchemeType: schemeType,\n    SecretKey: secretKey,\n    SecurityLevel: securityLevel, // Singleton\n    Serializable: serializable,\n    Vector: vector,\n    Version: version\n  }\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type SecretKeyDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type SecretKeyDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: SecretKeyDependencyOptions): SecretKeyConstructorOptions\n}\n\nexport type SecretKeyConstructorOptions = {\n  (): SecretKey\n}\n\nexport type SecretKey = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: SecretKey) => void\n  readonly clone: () => SecretKey\n  readonly move: (key: SecretKey) => void\n}\n\nconst SecretKeyConstructor =\n  (library: Library): SecretKeyDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: SecretKeyDependencyOptions): SecretKeyConstructorOptions =>\n  (): SecretKey => {\n    const Constructor = library.SecretKey\n    let _instance = new Constructor()\n\n    /**\n     * @implements SecretKey\n     */\n\n    /**\n     * @interface SecretKey\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name SecretKey#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name SecretKey#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name SecretKey#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name SecretKey#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the SecretKey as a binary Uint8Array\n       *\n       * @function\n       * @name SecretKey#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the SecretKey in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a SecretKey from a base64 string\n       *\n       * @function\n       * @name SecretKey#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a SecretKey from an Uint8Array holding binary data\n       *\n       * @function\n       * @name SecretKey#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing SecretKey and overwrite this instance\n       *\n       * @function\n       * @name SecretKey#copy\n       * @param {SecretKey} key SecretKey to copy\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = seal.SecretKey()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: SecretKey) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this SecretKey\n       *\n       * @function\n       * @name SecretKey#clone\n       * @returns {SecretKey}\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): SecretKey {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = SecretKeyConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a SecretKey into this one and delete the old reference\n       *\n       * @function\n       * @name SecretKey#move\n       * @param {SecretKey} key SecretKey to move\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = seal.SecretKey()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: SecretKey) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const SecretKeyInit = ({\n  loader\n}: LoaderOptions): SecretKeyDependencies => {\n  const library: Library = loader.library\n  return SecretKeyConstructor(library)\n}\n","import { Library, LoaderOptions } from './seal'\n\nexport type SecurityLevelDependencies = {\n  (): SecurityLevelConstructorOptions\n}\n\nexport type SecurityLevelConstructorOptions = {\n  (): SecurityLevel\n}\n\nexport type SecurityLevel = {\n  readonly none: any\n  readonly tc128: any\n  readonly tc192: any\n  readonly tc256: any\n}\n\nconst SecurityLevelConstructor =\n  (library: Library): SecurityLevelDependencies =>\n  (): SecurityLevelConstructorOptions =>\n  (): SecurityLevel => {\n    // Static methods\n    const _none = library.SecLevelType.none\n    const _tc128 = library.SecLevelType.tc128\n    const _tc192 = library.SecLevelType.tc192\n    const _tc256 = library.SecLevelType.tc256\n\n    /**\n     * @implements SecurityLevel\n     */\n\n    /**\n     * @interface SecurityLevel\n     */\n    return {\n      /**\n       * Returns the 'none' security level\n       *\n       * @readonly\n       * @name SecurityLevel.none\n       * @type {SecurityLevel.none}\n       */\n      get none() {\n        /**\n         * @typedef {SecurityLevel.none} SecurityLevel.none\n         */\n        return _none\n      },\n\n      /**\n       * Returns the '128' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc128\n       * @type {SecurityLevel.tc128}\n       */\n      get tc128() {\n        /**\n         * @typedef {SecurityLevel.tc128} SecurityLevel.tc128\n         */\n        return _tc128\n      },\n\n      /**\n       * Returns the '192' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc192\n       * @type {SecurityLevel.tc192}\n       */\n      get tc192() {\n        /**\n         * @typedef {SecurityLevel.tc192} SecurityLevel.tc192\n         */\n        return _tc192\n      },\n\n      /**\n       * Returns the '256' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc256\n       * @type {SecurityLevel.tc256}\n       */\n      get tc256() {\n        /**\n         * @typedef {SecurityLevel.tc256} SecurityLevel.tc256\n         */\n        return _tc256\n      }\n    }\n  }\nexport const SecurityLevelInit = ({\n  loader\n}: LoaderOptions): SecurityLevelDependencies => {\n  const library: Library = loader.library\n  return SecurityLevelConstructor(library)\n}\n","import { INSTANCE_DELETED, UNSUPPORTED_VECTOR_TYPE } from './constants'\nimport { Exception, SealError } from './exception'\nimport { Instance, Library, LoaderOptions } from './seal'\n\nexport type VectorDependencyOptions = {\n  readonly Exception: Exception\n}\n\nexport type VectorDependencies = {\n  ({ Exception }: VectorDependencyOptions): VectorConstructorOptions\n}\n\nexport type VectorConstructorOptions = {\n  (): Vector\n}\n\nexport type Vector = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly from: (array: VectorTypes, type?: StringTypes) => Instance\n  readonly type: string\n  readonly setType: (type: StringTypes) => void\n  readonly size: number\n  readonly getValue: (index: number) => number\n  readonly resize: (size: number, fill: number) => void\n  readonly toArray: () => VectorTypes\n}\n\nexport type VectorTypes =\n  | Uint8Array\n  | Int32Array\n  | Uint32Array\n  | Float64Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport type StringTypes =\n  | 'Uint8Array'\n  | 'Int32Array'\n  | 'Uint32Array'\n  | 'Float64Array'\n  | 'BigInt64Array'\n  | 'BigUint64Array'\n  | 'Modulus'\n\nconst VectorConstructor =\n  (library: Library): VectorDependencies =>\n  ({ Exception }: VectorDependencyOptions): VectorConstructorOptions =>\n  (): Vector => {\n    // Static methods\n    const _vecFromArrayUint8 = library.vecFromArrayUint8\n    const _vecFromArrayUint32 = library.vecFromArrayUint32\n    const _vecFromArrayInt32 = library.vecFromArrayInt32\n    const _vecFromArrayFloat64 = library.vecFromArrayFloat64\n    const _vecFromArrayBigInt64 = library.vecFromArrayBigInt64\n    const _vecFromArrayBigUint64 = library.vecFromArrayBigUint64\n    const _vecFromArrayModulus = library.vecFromArrayModulus\n    const _jsArrayUint8FromVec = library.jsArrayUint8FromVec\n    const _jsArrayUint32FromVec = library.jsArrayUint32FromVec\n    const _jsArrayInt32FromVec = library.jsArrayInt32FromVec\n    const _jsArrayFloat64FromVec = library.jsArrayFloat64FromVec\n    const _jsArrayStringFromVecInt64 = library.jsArrayStringFromVecInt64\n    const _jsArrayStringFromVecUint64 = library.jsArrayStringFromVecUint64\n    const _jsArrayStringFromVecModulus = library.jsArrayStringFromVecModulus\n\n    let _instance: Instance\n    let _type: StringTypes\n    /**\n     * @implements Vector\n     */\n\n    /**\n     * @interface Vector\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Vector#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Vector#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Vector#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Converts a JS TypedArray into a vector\n       *\n       * @function\n       * @name Vector#from\n       * @param {VectorTypes} array The TypedArray to convert\n       * @param {StringTypes} [type] An optional type override - useful for 'Modulus' only\n       */\n      from(array: VectorTypes, type?: StringTypes) {\n        try {\n          _type = type ? type : (array.constructor.name as StringTypes)\n          switch (_type) {\n            case 'Uint8Array':\n              _instance = _vecFromArrayUint8(array)\n              break\n            case 'Int32Array':\n              _instance = _vecFromArrayInt32(array)\n              break\n            case 'Uint32Array':\n              _instance = _vecFromArrayUint32(array)\n              break\n            case 'Float64Array':\n              _instance = _vecFromArrayFloat64(array)\n              break\n            case 'BigInt64Array':\n              _instance = _vecFromArrayBigInt64(array.toString().split(','))\n              break\n            case 'BigUint64Array':\n              _instance = _vecFromArrayBigUint64(array.toString().split(','))\n              break\n            case 'Modulus':\n              _instance = _vecFromArrayModulus(array.toString().split(','))\n              break\n            default:\n              throw new Error(UNSUPPORTED_VECTOR_TYPE)\n          }\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The Vector type\n       *\n       * @readonly\n       * @name Vector#type\n       */\n      get type(): StringTypes {\n        return _type\n      },\n\n      /**\n       * Set the Vector type\n       *\n       * @function\n       * @name Vector#setType\n       * @param {StringTypes} type the type of the vector\n       */\n      setType(type: StringTypes) {\n        _type = type\n      },\n\n      /**\n       * The vector size\n       *\n       * @readonly\n       * @name Vector#size\n       * @type {number}\n       */\n      get size(): number {\n        return _instance.size()\n      },\n\n      /**\n       * Get a value pointed to by the specified index\n       *\n       * @function\n       * @name Vector#getValue\n       * @param {number} index Index of the Vector\n       * @returns {number} Value of the element in the Vector pointed to by the index\n       */\n      getValue(index: number): number {\n        try {\n          return _instance.get(index)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resizes a vector to the given size\n       *\n       * @function\n       * @name Vector#resize\n       * @param {number} size number of elements to resize\n       * @param {number} fill Data to fill the vector with\n       */\n      resize(size: number, fill: number) {\n        try {\n          _instance.resize(size, fill)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy a vector's data into a Typed Array\n       *\n       * Note: we cannot simply return a view on the underlying ArrayBuffer\n       * because WASM memory can grow and cause all the views to become\n       * neutered. We have to perform a hard copy to get data from WASM heap to JS.\n       *\n       * @function\n       * @name Vector#toArray\n       * @returns {VectorTypes} TypedArray containing values from the Vector\n       */\n      toArray(): VectorTypes {\n        if (!_instance) {\n          throw new Error(INSTANCE_DELETED)\n        }\n        switch (_type) {\n          case 'Uint8Array':\n            return Uint8Array.from(_jsArrayUint8FromVec(_instance))\n          case 'Int32Array':\n            return Int32Array.from(_jsArrayInt32FromVec(_instance))\n          case 'Uint32Array':\n            return Uint32Array.from(_jsArrayUint32FromVec(_instance))\n          case 'Float64Array':\n            return Float64Array.from(_jsArrayFloat64FromVec(_instance))\n          case 'BigInt64Array':\n            return BigInt64Array.from(_jsArrayStringFromVecInt64(_instance))\n          case 'BigUint64Array':\n            return BigUint64Array.from(_jsArrayStringFromVecUint64(_instance))\n          case 'Modulus':\n            return BigUint64Array.from(_jsArrayStringFromVecModulus(_instance))\n          default:\n            throw new Error(UNSUPPORTED_VECTOR_TYPE)\n        }\n      }\n    }\n  }\n\nexport const VectorInit = ({ loader }: LoaderOptions): VectorDependencies => {\n  const library: Library = loader.library\n  return VectorConstructor(library)\n}\n","import sealLibrary from 'seal_throws_wasm_web'\nimport { SEALLibrary } from './implementation/seal'\nimport { Loader, createLoader } from './main/loader'\nimport { SEAL } from './main/seal'\n/**\n * Export a function which loads the proper build\n */\nconst loader = async (): Promise<Loader> => createLoader(sealLibrary)\n\n/**\n * Main export for node-seal\n */\nexport default async (): Promise<SEALLibrary> => SEAL(loader)\n","import { BatchEncoderInit } from '../implementation/batch-encoder'\nimport { CipherTextInit } from '../implementation/cipher-text'\nimport { CKKSEncoderInit } from '../implementation/ckks-encoder'\nimport { CoeffModulusInit } from '../implementation/coeff-modulus'\nimport { ComprModeTypeInit } from '../implementation/compr-mode-type'\nimport { ContextInit } from '../implementation/context'\nimport { ContextDataInit } from '../implementation/context-data'\nimport { DecryptorInit } from '../implementation/decryptor'\nimport { EncryptionParameterQualifiersInit } from '../implementation/encryption-parameter-qualifiers'\nimport { EncryptionParametersInit } from '../implementation/encryption-parameters'\nimport { EncryptorInit } from '../implementation/encryptor'\nimport { EvaluatorInit } from '../implementation/evaluator'\nimport { ExceptionInit } from '../implementation/exception'\nimport { GaloisKeysInit } from '../implementation/galois-keys'\nimport { KeyGeneratorInit } from '../implementation/key-generator'\nimport { MemoryPoolHandleInit } from '../implementation/memory-pool-handle'\nimport { ModulusInit } from '../implementation/modulus'\nimport { ParmsIdTypeInit } from '../implementation/parms-id-type'\nimport { PlainModulusInit } from '../implementation/plain-modulus'\nimport { PlainTextInit } from '../implementation/plain-text'\nimport { PublicKeyInit } from '../implementation/public-key'\nimport { RelinKeysInit } from '../implementation/relin-keys'\nimport { SchemeTypeInit } from '../implementation/scheme-type'\nimport { SEALConstructor, SEALLibrary } from '../implementation/seal'\nimport { SecretKeyInit } from '../implementation/secret-key'\nimport { SecurityLevelInit } from '../implementation/security-level'\nimport { SerializableInit } from '../implementation/serializable'\nimport { VectorInit } from '../implementation/vector'\nimport { Loader } from './loader'\n\n/**\n * Main export for the library\n */\nexport const SEAL = async (\n  Loader: () => Promise<Loader>\n): Promise<SEALLibrary> => {\n  const loader = await Loader()\n  return SEALConstructor({\n    BatchEncoder: BatchEncoderInit({\n      loader\n    }),\n    CipherText: CipherTextInit({\n      loader\n    }),\n    CKKSEncoder: CKKSEncoderInit({\n      loader\n    }),\n    CoeffModulus: CoeffModulusInit({\n      loader\n    }),\n    ComprModeType: ComprModeTypeInit({\n      loader\n    }),\n    ContextData: ContextDataInit({\n      loader\n    }),\n    Context: ContextInit({\n      loader\n    }),\n    Decryptor: DecryptorInit({\n      loader\n    }),\n    EncryptionParameterQualifiers: EncryptionParameterQualifiersInit(),\n    EncryptionParameters: EncryptionParametersInit({\n      loader\n    }),\n    Encryptor: EncryptorInit({\n      loader\n    }),\n    Evaluator: EvaluatorInit({\n      loader\n    }),\n    Exception: ExceptionInit({\n      loader\n    }),\n    GaloisKeys: GaloisKeysInit({\n      loader\n    }),\n    KeyGenerator: KeyGeneratorInit({\n      loader\n    }),\n    MemoryPoolHandle: MemoryPoolHandleInit({\n      loader\n    }),\n    Modulus: ModulusInit({\n      loader\n    }),\n    ParmsIdType: ParmsIdTypeInit({\n      loader\n    }),\n    PlainText: PlainTextInit({\n      loader\n    }),\n    PlainModulus: PlainModulusInit({\n      loader\n    }),\n    PublicKey: PublicKeyInit({\n      loader\n    }),\n    RelinKeys: RelinKeysInit({\n      loader\n    }),\n    SchemeType: SchemeTypeInit({\n      loader\n    }),\n    SecretKey: SecretKeyInit({\n      loader\n    }),\n    SecurityLevel: SecurityLevelInit({\n      loader\n    }),\n    Serializable: SerializableInit(),\n    Vector: VectorInit({\n      loader\n    })\n  })\n}\n","import { Instance } from './seal'\nimport { SecurityLevel } from './security-level'\n\nexport type EncryptionParameterQualifiersDependencies = {\n  (): EncryptionParameterQualifiersConstructorOptions\n}\n\nexport type EncryptionParameterQualifiersConstructorOptions = {\n  (): EncryptionParameterQualifiers\n}\n\nexport type EncryptionParameterQualifiers = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parametersSet: () => boolean\n  readonly usingFFT: boolean\n  readonly usingNTT: boolean\n  readonly usingBatching: boolean\n  readonly usingFastPlainLift: boolean\n  readonly usingDescendingModulusChain: boolean\n  readonly securityLevel: SecurityLevel\n}\n\nconst EncryptionParameterQualifiersConstructor =\n  (): EncryptionParameterQualifiersDependencies =>\n  (): EncryptionParameterQualifiersConstructorOptions =>\n  (): EncryptionParameterQualifiers => {\n    let _instance: Instance\n    /**\n     * @implements EncryptionParameterQualifiers\n     */\n\n    /**\n     * @interface EncryptionParameterQualifiers\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name EncryptionParameterQualifiers#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name EncryptionParameterQualifiers#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name EncryptionParameterQualifiers#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * If the encryption parameters are set in a way that is considered valid by\n       * Microsoft SEAL, the variable parameters_set is set to true.\n       *\n       * @function\n       * @name EncryptionParameterQualifiers#parametersSet\n       * @type {boolean}\n       */\n      parametersSet() {\n        return _instance.parametersSet()\n      },\n\n      /**\n       * Tells whether FFT can be used for polynomial multiplication. If the\n       * polynomial modulus is of the form X^N+1, where N is a power of two, then\n       * FFT can be used for fast multiplication of polynomials modulo the polynomial\n       * modulus. In this case the variable using_fft will be set to true. However,\n       * currently Microsoft SEAL requires this to be the case for the parameters\n       * to be valid. Therefore, parameters_set can only be true if using_fft is\n       * true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingFFT\n       * @type {boolean}\n       */\n      get usingFFT() {\n        return _instance.usingFFT\n      },\n\n      /**\n       * Tells whether NTT can be used for polynomial multiplication. If the primes\n       * in the coefficient modulus are congruent to 1 modulo 2N, where X^N+1 is the\n       * polynomial modulus and N is a power of two, then the number-theoretic\n       * transform (NTT) can be used for fast multiplications of polynomials modulo\n       * the polynomial modulus and coefficient modulus. In this case the variable\n       * using_ntt will be set to true. However, currently Microsoft SEAL requires\n       * this to be the case for the parameters to be valid. Therefore, parameters_set\n       * can only be true if using_ntt is true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingNTT\n       * @type {boolean}\n       */\n      get usingNTT() {\n        return _instance.usingNTT\n      },\n\n      /**\n       * Tells whether batching is supported by the encryption parameters. If the\n       * plaintext modulus is congruent to 1 modulo 2N, where X^N+1 is the polynomial\n       * modulus and N is a power of two, then it is possible to use the BatchEncoder\n       * class to view plaintext elements as 2-by-(N/2) matrices of integers modulo\n       * the plaintext modulus. This is called batching, and allows the user to\n       * operate on the matrix elements (slots) in a SIMD fashion, and rotate the\n       * matrix rows and columns. When the computation is easily vectorizable, using\n       * batching can yield a huge performance boost. If the encryption parameters\n       * support batching, the variable using_batching is set to true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingBatching\n       * @type {boolean}\n       */\n      get usingBatching() {\n        return _instance.usingBatching\n      },\n\n      /**\n       * Tells whether fast plain lift is supported by the encryption parameters.\n       * A certain performance optimization in multiplication of a ciphertext by\n       * a plaintext (Evaluator::multiply_plain) and in transforming a plaintext\n       * element to NTT domain (Evaluator::transform_to_ntt) can be used when the\n       * plaintext modulus is smaller than each prime in the coefficient modulus.\n       * In this case the variable using_fast_plain_lift is set to true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingFastPlainLift\n       * @type {boolean}\n       */\n      get usingFastPlainLift() {\n        return _instance.usingFastPlainLift\n      },\n\n      /**\n       * Tells whether the coefficient modulus consists of a set of primes that\n       * are in decreasing order. If this is true, certain modular reductions in\n       * base conversion can be omitted, improving performance.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingDescendingModulusChain\n       * @type {boolean}\n       */\n      get usingDescendingModulusChain() {\n        return _instance.usingDescendingModulusChain\n      },\n\n      /**\n       * Tells whether the encryption parameters are secure based on the standard\n       * parameters from HomomorphicEncryption.org security standard.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#securityLevel\n       * @type {(SecurityLevel.none|SecurityLevel.tc128|SecurityLevel.tc192|SecurityLevel.tc256)}\n       */\n      get securityLevel() {\n        return _instance.securityLevel\n      }\n    }\n  }\n\nexport const EncryptionParameterQualifiersInit =\n  (): EncryptionParameterQualifiersDependencies => {\n    return EncryptionParameterQualifiersConstructor()\n  }\n","import { ComprModeType } from './compr-mode-type'\nimport { Exception, SealError } from './exception'\nimport { Instance } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport type SerializableDependencyOptions = {\n  readonly Exception: Exception\n  readonly Vector: VectorConstructorOptions\n  readonly ComprModeType: ComprModeType\n}\n\nexport type SerializableDependencies = {\n  ({\n    Exception,\n    Vector,\n    ComprModeType\n  }: SerializableDependencyOptions): SerializableConstructorOptions\n}\n\nexport type SerializableConstructorOptions = {\n  (): Serializable\n}\n\nexport type Serializable = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n}\n\nconst SerializableConstructor =\n  (): SerializableDependencies =>\n  ({\n    Exception,\n    Vector,\n    ComprModeType\n  }: SerializableDependencyOptions): SerializableConstructorOptions =>\n  (): Serializable => {\n    let _instance: Instance\n\n    /**\n     * @implements Serializable\n     */\n\n    /**\n     * @interface Serializable\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Serializable#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Serializable#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Serializable#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Save to a base64 string\n       *\n       * @function\n       * @name Serializable#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save as a binary Uint8Array\n       *\n       * @function\n       * @name Serializable#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the Serializable object in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      }\n    }\n  }\n\nexport const SerializableInit = (): SerializableDependencies => {\n  return SerializableConstructor()\n}\n"],"names":["_scriptName","Module","document","currentScript","src","undefined","moduleArg","aa","ba","ja","k","Object","assign","ca","Promise","a","b","da","window","ea","importScripts","fa","ha","ia","r","self","location","href","startsWith","substr","replace","lastIndexOf","XMLHttpRequest","open","responseType","send","Uint8Array","response","la","ka","printErr","console","error","bind","thisProgram","quit","wasmBinary","ma","w","x","y","z","A","C","oa","pa","na","qa","buffer","HEAP8","Int8Array","HEAP16","Int16Array","HEAPU8","HEAPU16","Uint16Array","HEAP32","Int32Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","ra","sa","ta","ua","va","preRun","shift","unshift","D","F","xa","onAbort","WebAssembly","RuntimeError","za","ya","Ba","resolve","then","atob","slice","c","length","d","charCodeAt","Aa","instantiate","Da","this","name","message","status","Ea","Fa","noExitRuntime","Ga","constructor","Ja","K","M","G","I","J","Ka","La","O","h","n","N","forEach","e","Array","g","l","hasOwnProperty","push","TypeError","Ma","Q","Na","R","Oa","Qa","Ra","ga","Sa","P","Ta","pop","Wa","count","value","Va","create","writable","FinalizationRegistry","unregister","register","Xa","S","defineProperty","Ya","apply","Za","ab","bb","cb","db","eb","clone","T","fb","gb","fromWireType","hb","m","p","Ia","toWireType","kb","ob","ib","jb","lb","get","nb","includes","mb","U","qb","pb","V","W","map","join","rb","sb","tb","Function","prototype","ub","u","v","split","f","q","vb","wb","trim","indexOf","xb","yb","X","zb","Y","Bb","argPackAdvance","readValueFromPointer","Cb","Zb","Db","Eb","toString","Fb","Gb","Hb","Ib","Jb","TextDecoder","Kb","decode","subarray","String","fromCharCode","Lb","Mb","Nb","Ob","Pb","Qb","Rb","Sb","Tb","Ub","Vb","Yb","$b","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","_","bc","crypto","getRandomValues","ac","cc","dc","ec","gc","t","H","B","getFullYear","getMonth","getDate","getDay","Date","getTime","setDate","setMonth","setFullYear","Pa","wa","RegExp","substring","Math","floor","abs","fc","set","hc","ic","BindingError","Error","super","InternalError","isAliasOf","getPrototypeOf","call","isDeleted","deleteLater","getInheritedInstanceCount","keys","getLiveInheritedInstances","flushPendingDeletes","setDelayFunction","Ua","Ca","pointerType","UnboundTypeError","stack","count_emval_handles","nc","kc","$a","E","Ab","L","s","Symbol","concat","enumerable","configurable","splice","className","values","o","ArrayBuffer","Uint8ClampedArray","jc","Ha","copyWithin","Xb","Wb","i","j","min","max","byteLength","grow","Z","exports","_emscripten_stack_alloc","emscripten_stack_get_current","lc","monitorRunDependencies","instantiateWasm","instance","catch","mc","_main","pc","calledRun","onRuntimeInitialized","qc","onExit","postRun","setStatus","setTimeout","dynCall_viij","dynCall_viiij","dynCall_iiiij","dynCall_vij","dynCall_iij","dynCall_iiij","dynCall_viijii","dynCall_iiiiij","dynCall_iiiiijj","$","dynCall_iiiiiijj","oc","preInit","noInitialRun","UNSUPPORTED_VECTOR_TYPE","BatchEncoderInit","loader","library","Exception","MemoryPoolHandle","PlainText","Vector","context","Constructor","BatchEncoder","_instance","safe","unsafeInject","delete","encode","array","plainText","plain","BigInt64Array","stringArray","BigUint64Array","signed","pool","global","tempVect","decodeInt32","setType","tempArr","toArray","decodeUint32","decodeBigInt","from","slotCount","BatchEncoderConstructor","CipherTextConstructor","ComprModeType","ParmsIdType","parmsId","sizeCapacity","Ciphertext","construct","reserve","capacity","resize","size","release","coeffModulusSize","polyModulusDegree","isTransparent","isNttForm","parms","inject","scale","setScale","save","compression","zstd","saveToString","saveArray","saveToArray","load","encoded","loadFromString","loadArray","loadFromArray","copy","cipher","clonedInstance","move","CipherTextInit","CKKSEncoderInit","CKKSEncoder","decodeDouble","CKKSEncoderConstructor","CoeffModulusInit","SecurityLevel","_MaxBitCount","CoeffModulus","MaxBitCount","_BFVDefault","BFVDefault","_CreateFromArray","CreateFromArray","securityLevel","tc128","vectorModulus","Create","bitSizes","CoeffModulusConstructor","ComprModeTypeInit","_none","none","_zlib","zlib","_zstd","ComprModeTypeConstructor","ContextInit","ContextData","encryptionParams","expandModChain","SEALContext","toHuman","getContextData","contextData","keyContextData","firstContextData","lastContextData","parametersSet","keyParmsId","firstParmsId","lastParmsId","usingKeyswitching","ContextConstructor","ContextDataConstructor","EncryptionParameters","EncryptionParameterQualifiers","encryptionParameters","qualifiers","encParmQualifiers","totalCoeffModulusBitCount","prevContextData","cxtData","nextContextData","chainIndex","ContextDataInit","DecryptorInit","secretKey","Decryptor","decrypt","cipherText","invariantNoiseBudget","DecryptorConstructor","EncryptionParametersInit","Modulus","SchemeType","schemeType","setPolyModulusDegree","setCoeffModulus","coeffModulus","setPlainModulus","plainModulus","scheme","smallModulus","BigInt","EncryptionParametersConstructor","EncryptorInit","CipherText","Serializable","publicKey","Encryptor","constructInstance","encrypt","encryptSerializable","temp","encryptSymmetric","encryptSymmetricSerializable","serialized","encryptZero","encryptZeroSerializable","EncryptorConstructor","EvaluatorInit","Evaluator","negate","encrypted","destination","add","sub","multiply","square","relinearize","relinKeys","cipherModSwitchToNext","cipherModSwitchTo","plainModSwitchToNext","plainModSwitchTo","rescaleToNext","rescaleTo","modReduceToNext","modReduceTo","exponentiate","exponent","addPlain","subPlain","multiplyPlain","plainTransformToNtt","destinationNtt","cipherTransformToNtt","cipherTransformFromNtt","encryptedNtt","applyGalois","galoisElt","galoisKeys","rotateRows","steps","rotateColumns","rotateVector","complexConjugate","sumElements","newDest","dotProduct","dotProductPlain","EvaluatorConstructor","ExceptionInit","_getException","getException","ExceptionConstructor","GaloisKeysConstructor","GaloisKeys","getIndex","hasKey","key","GaloisKeysInit","KeyGeneratorInit","PublicKey","SecretKey","RelinKeys","KeyGenerator","createPublicKey","createPublicKeySerializable","createRelinKeys","createRelinKeysSerializable","createGaloisKeys","createGaloisKeysSerializable","KeyGeneratorConstructor","MemoryPoolHandleInit","_global","MemoryPoolHandleGlobal","_threadLocal","MemoryPoolHandleThreadLocal","threadLocal","MemoryPoolHandleConstructor","ModulusInit","inst","setValue","createModulus","bitCount","isZero","isPrime","ModulusConstructor","ParmsIdTypeInit","ParmsIdTypeConstructor","PlainModulusInit","_Batching","PlainModulus","Batching","_BatchingVector","BatchingVector","bitSize","smallMod","polyPlainModulusDegree","vectBitSizes","vect","PlainModulusConstructor","PlainTextConstructor","coeffCount","Plaintext","shrinkToFit","setZero","significantCoeffCount","nonzeroCoeffCount","toPolynomial","PlainTextInit","PublicKeyConstructor","PublicKeyInit","RelinKeysConstructor","keyPower","RelinKeysInit","SchemeTypeInit","_bfv","bfv","_ckks","ckks","_bgv","bgv","SchemeTypeConstructor","SecretKeyConstructor","SecretKeyInit","SecurityLevelInit","SecLevelType","_tc128","_tc192","tc192","_tc256","tc256","SecurityLevelConstructor","VectorInit","_vecFromArrayUint8","vecFromArrayUint8","_vecFromArrayUint32","vecFromArrayUint32","_vecFromArrayInt32","vecFromArrayInt32","_vecFromArrayFloat64","vecFromArrayFloat64","_vecFromArrayBigInt64","vecFromArrayBigInt64","_vecFromArrayBigUint64","vecFromArrayBigUint64","_vecFromArrayModulus","vecFromArrayModulus","_jsArrayUint8FromVec","jsArrayUint8FromVec","_jsArrayUint32FromVec","jsArrayUint32FromVec","_jsArrayInt32FromVec","jsArrayInt32FromVec","_jsArrayFloat64FromVec","jsArrayFloat64FromVec","_jsArrayStringFromVecInt64","jsArrayStringFromVecInt64","_jsArrayStringFromVecUint64","jsArrayStringFromVecUint64","_jsArrayStringFromVecModulus","jsArrayStringFromVecModulus","_type","type","getValue","index","fill","VectorConstructor","async","bin","createLoader","sealLibrary","Loader","Context","exception","comprModeType","memoryPoolHandle","vector","modulus","serializable","parmsIdType","batchEncoder","ckksEncoder","encryptionParameterQualifiers","decryptor","encryptor","evaluator","Version","SEALConstructor","usingFFT","usingNTT","usingBatching","usingFastPlainLift","usingDescendingModulusChain","SEAL"],"mappings":"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"}